<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Ruth Liu</title>
 <link href="http://username.github.com/atom.xml" rel="self"/>
 <link href="http://username.github.com"/>
 <updated>2013-01-25T11:47:35+08:00</updated>
 <id>http://username.github.com</id>
 <author>
   <name></name>
   <email>liusihao123@qq.com</email>
 </author>

 
 <entry>
   <title>ruby中class_eval和instance_eval的区别</title>
   <link href="http://username.github.com/technology/2013/01/25/rubyzhongclass_evalheinstance_evaldequbie"/>
   <updated>2013-01-25T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2013/01/25/rubyzhongclass_evalheinstance_evaldequbie</id>
   <content type="html">&lt;p&gt;（1) C.class_eval &amp;#8220;eval_str&amp;#8221; 等价于在C中放入eval_str这段代码：class_eval只有类对象(Class Object)才能执行，普通对象没有这个方法。&lt;/p&gt;

&lt;p&gt;（2）obj.instance_eval &amp;#8220;eval_str&amp;#8221; 等价于class &amp;#171;&amp;#160;obj eval_str end，也就是在obj的单例类中放入eval_str这段代码，同时还能访问obj的实例变量！instance_eval对任意实例都可以运行。&lt;/p&gt;

&lt;p&gt;原理简记：&lt;br /&gt;（1）The Module class defines a method named class_eval . (module_eval is a synonym for class_eval .) ，Class &amp;lt; Module &amp;lt; Object&lt;/p&gt;

&lt;p&gt;（2）The Object class defines a method named instance_eval. ruby中都是对象，所以都可以运行哈。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Test;end
Test.class_eval do
	def class_eval_test
		puts &amp;quot;class_eval&amp;quot;
	end
end

Test.new.class_eval_test
#=&amp;gt;class_eval

Test.class_eval do
	puts &amp;quot;class_eval_2&amp;quot;
end
#=&amp;gt;class_eval_2

t = Test.new
t.instance_eval do
	def instance_eval_test
		puts &amp;quot;instance_eval_test&amp;quot;
	end
end

t.instance_eval_test
#=&amp;gt;instance_eval_test

Test.instance_eval_test
#=&amp;gt;NoMethodError: undefined method `instance_eval_test&amp;#39; for #&amp;lt;Class:0x00000002a84df8&amp;gt;::Test&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>闲聊书的等级</title>
   <link href="http://username.github.com/2012/12/29/xianliaoshudedengji"/>
   <updated>2012-12-29T00:00:00+08:00</updated>
   <id>http://username.github.com/2012/12/29/xianliaoshudedengji</id>
   <content type="html">&lt;p&gt;Q1，书分为几个等级？&lt;br /&gt;A1， 分为四个等级：神书，经典书，一流书籍，其它书籍 &lt;hr /&gt; Q2，什么是一流书籍？ A2，不谈论一流书籍厉害在哪，很难理解为在一流书籍更上层的书。一流书籍就是在某个领域有难以撼动的地位和极高口碑的书籍，它讲述了这个领域内经典的方法论和学习体系，并提供了优质的实践方式和理解内容。比如经济学中曼昆的《经济学原理》，兹维·博迪的《金融学》，《门口的野蛮人》，IT中的C语言创始人Brian W. Kernighan 和Dennis M. Ritchie的《The C Programming Language》，电信领域里的《TCP/IP详解》，摄影当中的《美国纽约摄影学院摄影教材》，漫画当中的《理解漫画》、《制造漫画》，绘画里的《伯里曼人体结构》，心理学里的《心理学与生活》，《幸福的方法》，每个领域中都有几十本这样的一流书籍，大多数专业人士都会津津乐道书。 &lt;hr /&gt; Q3，什么事经典书籍？&lt;br /&gt;A3， 经典书是那些触及到专业原理，是专业的源头，进行深度阅读，反复理解，并坚持实践后，可达到一法通万法通的境界，在每个专业之中只有少数几本才可以称之为经典书籍，有的专业甚至连一本都没有。比如，投资领域经典书有格林厄姆《证券分析》，绘画中的《素描的准则》，编剧中的《故事》，积极心理学中的《象与骑象人》、《超越自卑》和《少有人走的路》，编程领域的《计算机程序的构造和解释》《计算机程序设计艺术》，数学领域的《数学与猜想》、《怎样解题》，口语中的《美语发音13秘诀》。 &lt;hr /&gt; Q4，何为神书？&lt;br /&gt;A4，没有看过神书的人很难理解什么是真正的神书，一本书被称为神书有这样几个条件：1）深入浅出地道出凌驾于某个领域的本质性的原理和事实，并超越了该领域的知识，上升到“智慧”的层次；2）直指思想本质及事物本质，并将二者和谐地连接——而为了和谐地连接，神书必定有心理学的底蕴在内。简而言之——神书就是让人理解/实践成为天才的书，或者至少是窥见了成为天才的道路。至今为止我仅仅看过两本神书：&lt;/p&gt;

&lt;p&gt;1）&lt;a href='http://book.douban.com/subject/1055088/'&gt;《像艺术家一样思考》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='像艺术家一样思考' src='http://img3.douban.com/lpic/s2187956.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;2）&lt;a href='http://book.douban.com/subject/1013208/'&gt;《如何阅读一本书》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='如何阅读一本书' src='http://img3.douban.com/lpic/s1670978.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;Q5，其它书籍&lt;br /&gt;A5， 一些拿来即用的文档，有口碑的畅销书，理性的行业分析书籍等，有一些章节也许有值得一看的地方，但大部分书看了都是为了1）解决当前一时的问题，2）考试，3）开阔眼界，4）并无可取，浪费时间。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>2012年学习经验总结</title>
   <link href="http://username.github.com/essay/2012/12/29/2012nianxuexijingyanzongjie"/>
   <updated>2012-12-29T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/12/29/2012nianxuexijingyanzongjie</id>
   <content type="html">&lt;h2 id='id68'&gt;阅读与实践&lt;/h2&gt;

&lt;p&gt;今年读得最好的一本书是《如何阅读一本书》。里面有一句话让我的印象非常深刻，大概的意思是“如果你读一本实用性的书而不能在实践中运用它，那么这本书相当于白读了。”我非常赞同，之前看茅于轼的博客中的一篇《习而时学之的工程学教育》也提到“用以致学”，我觉得就编程来说，更好的教育方式应该是从简单到难，一开始学HTML，CSS或一些简单的界面设计，然后是python或Ruby，再然后是SQL、开发框架，项目管理工具，版本管理工具地使用，接着学C，C++和JAVA及其开发工具，再接着是重构和设计模式，最后才是算法、数据结构、操作系统、编译原理这些东西，从易到难，用以致学；而当代IT教育的路数确是C语言——算法——数据库——编译原理——操作系统，中间加上网络、互联网、分布式、电信方面的基础理论，不得不感叹这种路数真是太特么坑爹了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id69'&gt;如何学习&lt;/h2&gt;

&lt;h4 id='id70'&gt;信源&lt;/h4&gt;

&lt;p&gt;信源的价值是学习要素中占得分量最大的那一块——甚至比意志力和专注更重要，寻找到高价值的适合自己的信源这一点再怎么强调也不为过。比如操作系统这种东西，最好就是照着Linux 1.1的源码自己写一个微型操作系统出来；编译原理也一样，自己照着书和编译器的源代码试着实现一个自己的编译器；算法与数据结构这种系统性不强的科目每天看一篇清晰易懂的博文并实践就很好了。&lt;/p&gt;

&lt;h4 id='id71'&gt;实践&lt;/h4&gt;

&lt;p&gt;最好的学习方式：是加入一个项目与圈子，在实践中成长。有团队就在团队中边做边学，没有团队就在Github上找个简单的开源项目去fork，研究，修改。以项目为中心，书、论文、google都是只是参考。少看多做非常非常重要！！（这也是跟我自己说的），玩机器学习？看了书理解基本后直接fork github一个项目开始看源代码，自己修改代码，pull request。操作系统？编译器？都是这样。&lt;/p&gt;

&lt;h4 id='id72'&gt;生态环境&lt;/h4&gt;

&lt;p&gt;该分支的生态环境——开源社区的贡献、巨头公司和大学在上下游的支持、这个领域的大牛、著名论文有哪些？熟悉生态环境是在你实践一个项目的过程中会自然而然接触到的，也是在实践之后要重点熟悉的。&lt;/p&gt;

&lt;h4 id='id73'&gt;选书？&lt;/h4&gt;

&lt;p&gt;书只是众多信源中的一种，我现在感觉书的重要性远远没有人们想象的那么高，如果不是一个人的主业，对每个细分领域中，反复阅读的经典书籍也就两三本，一本经典入门，一本当手册参考，一本讲思想本质，多余的书是不值得读全本的。我现在反复阅读的书中只有Ruby on Rails这一块中有超过3本，远离读书的诱惑，非常有必要。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id74'&gt;我的学习管理&lt;/h2&gt;

&lt;p&gt;因为是做IT的缘故，我的学习管理链全都是软件工具所构建的，分为下面这些软件：&lt;/p&gt;

&lt;p&gt;笔记软件evernote和豆瓣笔记，阅读工具kindle和ipad上的GoodReader和，知识管理工具Github，ipad上的思维导图软件Mindo，中转工具163电子邮箱，输出及分享方式：&lt;a href='http://www.douban.com/people/baiwuya/notes'&gt;豆瓣日记&lt;/a&gt;和&lt;a href='http://liusihao.com/'&gt;我的博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这些软件又分为三大类：输入，整理和输出&lt;/p&gt;

&lt;h3 id='id75'&gt;输入&lt;/h3&gt;

&lt;h4 id='id76'&gt;第一手知识来源：&lt;/h4&gt;

&lt;p&gt;博客、书籍、遇到疑难问题后google的答案、SNS碎片知识&lt;/p&gt;

&lt;h4 id='id77'&gt;处理方式：&lt;/h4&gt;

&lt;p&gt;google的答案、SNS碎片、博客中确实有效用的都用chrome的插件“悦读”（也叫evernote clipe）&lt;/p&gt;

&lt;p&gt;&lt;img alt='evernote clip' src='http://farm9.staticflickr.com/8217/8320622002_3cc6f517c6.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;剪切下来，自动存入中evernote中，待以后整理。 而书籍则使用kindle和GooderReader阅读，使用它们它们的好处在于，1）不懂的英文单词可以迅速查阅（kindle自带词典，ipad用有道词典）；2）可以做笔记，kindle自带highlight功能，而Gooder则更为丰富，箭头、注释等都有。为了保护眼睛，一般能用kindle看的书都在kindle上看；而大型PDF则会在ipad上看，所以很多专业书籍都是在ipad上看完的。 这里会用到ipad上的软件——思维导图软件Mindo。我会尽量在它上面记笔记而不是在PDF上面highlight和写注释： 而这个软件生成的导图最终会通过email发送到我的电脑上整理归类 电脑上也会偶尔看一下书，这时笔记则会记在&lt;a href='http://book.douban.com/people/baiwuya/annotation/'&gt;我的豆瓣笔记&lt;/a&gt;上。但最终能形成思维导图的笔记都会归类成思维导图。&lt;/p&gt;

&lt;p&gt;&lt;img alt='mind map' src='http://farm9.staticflickr.com/8491/8320620890_daaa2ee968_b.jpg' /&gt;&lt;/p&gt;

&lt;h3 id='id78'&gt;整理&lt;/h3&gt;

&lt;p&gt;能形成思维导图的笔记都会通过email发送到我的电脑上。 而不能形成导图的笔记事先会在evernote或豆瓣笔记里加上标签和分类，多了之后的则会整理成&lt;a href='http://zh.wikipedia.org/zh-hans/Markdown'&gt;markdown&lt;/a&gt;形式的知识树，最后思维导图、markdown文件、一些可重用的代码都会整合到我用github做的&lt;a href='https://github.com/WhiteCrow/km'&gt;知识管理工具&lt;/a&gt;中。&lt;/p&gt;

&lt;h3 id='id79'&gt;输出&lt;/h3&gt;

&lt;p&gt;最后输出分为两份： 豆瓣日记则是随笔，想到什么写什么，大多写的短文； 博客，写可以分享的，稍微有价值一些的东西；&lt;/p&gt;

&lt;h3 id='id80'&gt;欠缺的东西&lt;/h3&gt;

&lt;p&gt;这个学习管理链条中还欠缺一些东西&lt;br /&gt;1. 高端知识的输入——知名博客、论文数据库。&lt;br /&gt;2. 自动化的整理方式，可参考阳志平的&lt;a href='http://www.douban.com/note/254981732/'&gt;科学的科学：科学计量学入门浅谈所用到的方法&lt;/a&gt;。&lt;br /&gt;3. 知识管理系统查阅缓慢，需要做成一个web app，并将它和我的博客合并起来。&lt;br /&gt;4. 工具太分散了，特别是笔记工具，需要调整。&lt;br /&gt;5. 请大家批评。&lt;/p&gt;

&lt;p&gt;接下来，我会写我的2012年个人软件工具使用和项目管理总结。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>（转）从一种互相控制中脱离</title>
   <link href="http://username.github.com/essay/2012/12/14/zhuancongyizhonghuxiangkongzhizhongtuoli"/>
   <updated>2012-12-14T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/12/14/zhuancongyizhonghuxiangkongzhizhongtuoli</id>
   <content type="html">&lt;p&gt;在事情开始之初，必然有一方是强大的。这样的强大通过暴力和资源的占有来体现。然后，在时间流逝的过程中，强大的一方必然需要做一些什么，比弱小的一方多做一些什么。这些事情在结果的某个方面所指向的是维持强大一方的强大。而人作为人，纵然其可以设想出任何一个方面都看似完美的神的形象和行为，却在真正实施行为的时候，必然因为自身的那些并不及神的所谓局限性而使得事情的结果和开始的期望产生落差。这样的落差必然激怒弱小的一方，如果，他们二者在这件事情上有足够明显的交集的话。于是，弱小的一方就也自然而然地拿出那些弱小却自以为强大的方式，向反方向甚至是无方向做歇斯底里的努力。这就导致了控制的循环，一种来自强大一方，却循环于双方的让人感到绝望的控制。所有的人都因为这样的控制而感到头疼，失眠，恶心，及更多的不良状况。如果其中的谁足够宽广且其思维具有足够的跳跃性，那么他必然想从这样的互相控制的循环中脱离，将人生的 10000 天用于指向更加宽广的结果的努力。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>最近的学习心得</title>
   <link href="http://username.github.com/essay/2012/12/13/zuijindexuexixinde"/>
   <updated>2012-12-13T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/12/13/zuijindexuexixinde</id>
   <content type="html">&lt;p&gt;我的计算机基础一直不是很好，但应用却都能做，很多人说“算法与数据结构”，“编译原理”之类的内功多么重要，但我认为在进行良好的工程训练之前，这种所谓的“重要”是难以习得的。在此之前，我认为真正的基本功应该是控制软件复杂度的能力（甚至可以说是经验带来的直觉）、refacting、版本控制、排错能力、测试等，再在这些保证构建复杂软件基础上去习得那些内功才是最更价值的。推荐博文有&lt;a href='http://blog.sina.com.cn/s/blog_49a3971d0102dufj.html'&gt;《习而时学之的》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1)扫读——实用——理论循环&lt;/p&gt;

&lt;p&gt;以前看数据库看的一本《数据库概论》，结果是讲数据库软件的设计理论，几大范式也讲得懵懵懂懂，无法理解。后来做项目，各种查询用多了再回过头来看《深入浅出SQL》才对数据库设计的几大范式真正有了理解。而且因为实用为目的，对书籍的选择都不一样。听说有的211学校老师上操作系统课时，直接弄了一个linux version 0.11的源代码给学生看，然后让他们照着做一个操作系统出来，一个学期就做这个，比一般的念书讲题考试有用多了。以后我学编译原理肯定也要自己做一个编译器出来，不然怎么能叫学过编译原理呢？&lt;/p&gt;

&lt;p&gt;2）学画手记 学画画的学习进度偏慢，一年下来认真画的不超过30幅，但所幸每一幅都较上一副有极大的进步，如果给自己学画一年的成绩打个分的画，70分吧。主要是因为时间每分配好，平均一个月才画一到两幅，而且每次画了一段时间注意力就分散，很看心情和时机，这也是我长久以来做事不够专注的原因。对我这段时间画画学习最有用的有两份教程：&lt;a href='http://book.douban.com/subject/1055088/'&gt;《像艺术家一样思考》&lt;/a&gt;和&lt;a href='http://www.verycd.com/topics/2885446/'&gt;《成都美术学院:陈惟老师:动漫插画12堂课》&lt;/a&gt;，推荐给想自学绘画的同学。 想画漫画的梦想慢慢走岔了，往插画那边发展去了，这样下去可不行。从下次开始认真练习风景速写，模仿和研究小田健的漫画吧。&lt;/p&gt;

&lt;p&gt;3）少吹牛，特别是少在SNS装逼了，别人夸你几句你就自以为是了？白乌鸦，你那些花架子太可笑了，安静做你该做的事吧。&lt;/p&gt;

&lt;p&gt;4）近来开始学习摄影了，测光、曝光、预升不熟悉，赶快熟悉呀。但别把摄影列进主要的学习任务，记住，摄影是为了你学习画画而服务的！&lt;/p&gt;

&lt;p&gt;5）接下来把SQL，《美国纽约摄影学院摄影教材》，尼康官网的摄影教程看完。每天记得画五张速写，每次限定在五分钟以内。这就是这一周和下一周的任务！！英语，下下周按照奶爸的方法给自己列个长时间的学习计划吧，另外《控制力》是本不错的书，有时间就看并做笔记。&lt;/p&gt;

&lt;p&gt;我发现每次写这类博客和日志都能让我整理好过去，重新定位目标，为我提供激发前进的能量，虽然效果不大，但坚持下来一定会很有成效吧。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>专业人生</title>
   <link href="http://username.github.com/essay/2012/10/26/zhuanyerensheng"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/10/26/zhuanyerensheng</id>
   <content type="html">&lt;p&gt;有这样一种精神，在日本被称之为“职人精神”，在美国被称之为“Profesional”。体现了这种精神的最典型的人物，我以为当属是《奇特的一生》的主角——柳比耶夫。我已经不止两三次听到各种行业内的专家提到这个名字。他除了是一位杰出的昆虫学家，更为著名的是他的神奇的笔记本：他将他自己所做的每一件事所花费的每一分钟都记在了他的笔记本上，就像是对自己人生的调焦，由朦胧、重叠、双影，最后无比清晰。&lt;/p&gt;

&lt;p&gt;他什么时候捕捉昆虫，什么时候坐标本，什么时候学习，什么时候睡觉，对时间记录的误差不超过五分钟，完完全全地诚实地记录在册。到最后他发展 出了一种神奇的能力：能够将一件事所用的时间精确地估计到每一分钟上。时间的汹涌暗流滚滚无声，呼啸而过，他静默地前伸手掌，捕捉到暗流的每一滴水滴，编织成一次次诚实的实践。对他来说，时间的急流，是看得见，摸得着的。抓住了细密的网眼，抓住了我们没有察觉的，无意间流逝的人生。&lt;/p&gt;

&lt;p&gt;他不忙，却比任何人都要干得多。&lt;/p&gt;

&lt;p&gt;一个人，如果想认清自己真正想要的是什么，那么他必须深刻地了解自己；如果他想深刻地了解自己，他必须对自己绝对地诚实。清晰、透明、不自欺。而柳比耶夫记的笔记，几乎是绝对的诚实。&lt;/p&gt;

&lt;p&gt;康德大师则是第二类实践者，他完全精确到分钟的作息时间，几点起床，几点看书，几点讲课。他每天下午五点钟都会准时出门，到不远的小树林去散步，而正好这时，教堂的钟声也随之敲响。仅有一次，康德因为看《爱弥尔》而忘记了时间，并没有准时出去散步，而的镇子里的人因为熟悉康德的十年如一日的作息时间，却认为是教堂的钟声敲错了时间。&lt;/p&gt;

&lt;p&gt;在我们软件开发行业，近年来敏捷开发很火，他要求开发人员不仅是一名编程者，更是一位“开发专家”，懂得与客户沟通，制定和修改计划，积极并认真仔细地实践，管理时间和进度。对团队诚实、对客户透明。中文虽翻作“敏捷”，但其核心思想不如说是Profesional。&lt;/p&gt;

&lt;p&gt;在《寿司之神》中，全世界最年长的米其林三星大厨小野二郎，他的团队在制作寿司时，从食材、制作到入口的瞬间，每个步骤都经过精密的计算。在偌大的日本，竟然被称为寿司之神，这份水准可想而知。而他的徒弟打了15年的下手才开始被允许开始学习蒸蛋。15年，通常是大部分开发人员职业生涯中，在程序员这个职位的时间的一到两倍。&lt;/p&gt;

&lt;p&gt;保持这种状态，会丧失娱乐？变得木头？变得书呆子吗？没有人这样规定过，几乎所有成功的漫画家的作品都是非常幽默的，冯·诺依曼和罗素年轻可都是帅气浪漫的公子哥。:）相反，如果这样诚实专业地对待自己的话，反倒不会患得患失，得到的是平和、自信与长久平稳的幸福。&lt;/p&gt;

&lt;p&gt;纵览历史，卓有成就者在”专业精神”上无不有着鲜明的实践——康德、柳比耶夫、查理·芒格、巴菲特、包括所有成功的漫画家……这份精神可说是追求人生成就所必备的基石——无论是那些大师的大成就，还是平凡人的小成就。这也许就是敏捷开发的核心思想，XP也好、Scrum也好，外在的方法论若没有了这份核心思想，想必很难长久地坚持下去。&lt;/p&gt;

&lt;p&gt;许多开发人员担心自己的学习速度不够、解决问题的本领弱、基础知识不牢固、英语能力欠缺……知识也好，才能也好，金钱也好，都是专业人生的副产品。最应该担心的不是薪资，不是经验，不是知识，更不是金钱，而是缺乏小野二郎所说职人精神！如果长久保持下去，财富和才能将以副产品的形式，滚滚而来。&lt;/p&gt;

&lt;p&gt;“那到底什么才是职人精神？”拍摄《寿司之神》时，摄影师问道。&lt;/p&gt;

&lt;p&gt;不远处的小野二朗的眼神很是诚恳平实，诚恳平实地震撼人心。&lt;/p&gt;

&lt;p&gt;“就像小野二郎那个样子。”一个店员说道，那个做了七十多年寿司的男人。&lt;/p&gt;

&lt;p&gt;真是奇特的一生。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>只接受其浪漫而不在意其琐碎</title>
   <link href="http://username.github.com/essay/2012/10/26/zhijieshouqilangmanerbuzaiyiqisuosui"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/10/26/zhijieshouqilangmanerbuzaiyiqisuosui</id>
   <content type="html">&lt;p&gt;生活越大众，对生活的琐碎和哀伤也越大众。&lt;/p&gt;

&lt;p&gt;各种年龄段的况味——懵懂的少年，迷茫的青年，琐碎的中年，以及圆满而孤独的老年；每个人都逃不出这些感情，一个人大学毕业后迷茫地摸索，中年结婚买房养小孩，无奈地工作中笑着摸摸孩子的面庞吗，然后圆满地过了一生后在害怕死亡中死去，努力扮演好你要得角色。目标、价值判断、他人的感染。&lt;/p&gt;

&lt;p&gt;但如果选择另一种生活，一种奇妙的生活。没有电影、小说作品或社会来叙述这种生活，你很难受到那种外界的感染，就像刚出生的小孩，不必明白中年的琐碎。我很喜欢这种陌生感。&lt;/p&gt;

&lt;p&gt;我最近找了实现这种生活 的步骤，近似于这种生活的步骤，最近在网上看到的西乔：http://www.china30s.com/1340.html ，我的豆友阳志平http://www.yangzhiping.com/都是这类人，我发现这是一个大多数普通人都可以实现的生活体系：那种奢侈的生活——这种生活不仅在于经济或物质上，而是真正的自由，这是我们这一代人最奢侈的东西，只接受其浪漫而不在意起琐碎。&lt;/p&gt;

&lt;p&gt;1. 没有价值判断与比较，沉浸于喜爱的复杂的事物之中。&lt;/p&gt;

&lt;p&gt;2. 自由，周转于各种领域和界限，可以今年画画，明年研究心理学，下一年去组乐队。&lt;/p&gt;

&lt;p&gt;3. 无需为大众的琐碎而琐碎，大众的哀伤而哀伤，像手冢治虫那样到死的时候也在画漫画。&lt;/p&gt;

&lt;p&gt;为何我讨厌大众的生活，其原由是因为最近看到了这个视频，我在过程中享受不到最绵长愉悦的欢乐，我在老了之后却又充满遗憾——这还是最好的情况： &lt;br /&gt;&lt;br /&gt; &lt;embed align='middle' allowFullscreen='true' allowScriptAccess='sameDomain' height='400' quality='high' src='http://player.youku.com/player.php/sid/XMzQ4NzQ3MjI0/v.swf' type='application/x-shockwave-flash' width='480' /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>昙华林</title>
   <link href="http://username.github.com/essay/2012/10/26/tanhualin"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/10/26/tanhualin</id>
   <content type="html">&lt;p&gt;光线从红茶杯的侧面透射过去，闪着黄昏的光彩，仿佛一个朝天躺在手术台上的病人。我在昙华林写着无谓的随笔。自从GL第一次带我来之后，我每周末都会一个人来这边坐一下午，这是一周中能让我感到最安静的一个下午，希望以后也能带几个喜欢这种环境的朋友来，LHQ、于望、卷春儿还有胡桃。客人们一波波来又一波波去，往往是两个人或者几个人，聊着八卦，吹着牛逼。时不时发出噪动的笑声，间而弄乱我读书的心情。而在下午四点钟过后，客人渐渐少了，任我一个人独享着静默的客房，这时写起东西来往往快得多。&lt;/p&gt;

&lt;p&gt;这家店，不知是叫奶茶店还是咖啡屋，斑驳的红色油漆沁在木门上像上个世纪那种专门贩卖小玩具的阁楼式的店家。其中有些细节就像在故意告诉你它只是存在于许多年前的一间回忆，而非恒存于世间的真实处所，我仍然不记得店名。像某一个角度，由上往下看着石棉瓦的屋檐上的繁茂枝叶拥抱着阁楼，温暖气味的阳光和阴影会洒入每个可趁的缝隙，令人想到母亲怀抱着襁褓中的婴儿，体温的暖流也能渗透进最封闭的角落。原本分散几处的相片，朝着一个集中收束的漩涡汇聚。穿透过扑灭而来的那些煮茶的厨具、石砖的街角、花盆、生锈的栏杆、小轿车的鸣声……像是某些日本青春片的预告：大片荒漠般的白雪中，正在徒步去上学的两个学生，或是落雨似的樱花下，一个新近搬家的女孩忽然认出这绝景而激动如大海，然后缓慢地沉淀下去，呈现出她们如泣如诉的告白、大楼上的的拥抱、或者是电车铁道旁说出互相伤害的话而声音却被急驶而过的火车巨啸而掩盖掉……&lt;/p&gt;

&lt;p&gt;我单点了一杯修女红茶。穿着白色围裙，散着淡金色长发的女店员端上一个金属小锅，不一会儿将暗绿色的茶叶煮沸，装腔作势地伸出大拇指和食指，捏起滤茶器，这时她的眼神会格外认真，将小锅里的茶水一滴不漏地滤入杯中。可以闻到水蒸汽溶得空气里到处都是茶香味。&lt;/p&gt;

&lt;p&gt;在这样歪歪斜斜的记忆里，我不安地等待她煮茶时，环视了店内，背后是一排书架，摆着顾客的留言或是留下的照片，留言分为两类，一类是利落帅气的行书，多用黑色钢笔所写，另一类是可爱的圆角字，多数时候还会在一旁加上一两个笑脸图；而照片则大多为黑白或lomo式的，平添几许爵士乐般的怀旧感。断断续续，婉转低回。店里也会很给气氛地放上爵士乐，让顾客欣赏那些留言、相片和小纪念品。&lt;/p&gt;

&lt;p&gt;“这曲子真好听，放得是什么歌？”有次一个胖乎乎的男孩问。 “《Fly me to the moon》。”他身边的女孩和店员一起含笑答道。&lt;/p&gt;

&lt;p&gt;Fill my heart with songs.&lt;br /&gt; And let me sing for ever more.&lt;br /&gt; You are all I long for.&lt;br /&gt; All I worship and adore.&lt;br /&gt; In other words,&lt;br /&gt; please be true.&lt;br /&gt; In other words,&lt;br /&gt; I love you.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby中Proc和lambda的区别</title>
   <link href="http://username.github.com/technology/2012/10/26/rubyzhongprochelambdedequbie"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2012/10/26/rubyzhongprochelambdedequbie</id>
   <content type="html">&lt;p&gt;Proc和lambda有两个区别，一个是return的作用范围，另一个是参数的处理方式。我们来用几个例子解释一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def foo
  f = Proc.new{|a,b| return [a,b]}
  puts f.call(1)
  return &amp;quot;I&amp;#39;m not display&amp;quot;
end

def bar
  b = lambda{|a,b| return [a,b] }
  puts b.call(1,2)
  return &amp;quot;I will display&amp;quot;
end

foo
# =&amp;gt; [1, nil]
bar
# 1 
# 2
#=&amp;gt; &amp;quot;I will display&amp;quot; &lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id67'&gt;参数处理&lt;/h2&gt;

&lt;p&gt;我们可以看到，假设Proc和lambda两者都定义了2个参数，但在实际调用时，只传一个的话，lambda 会报错，Proc 将缺失的参数设为 nil，然后正常调用。 f.call(1)时，得到的是&lt;span&gt;1,nil&lt;/span&gt; 而b.call(1)时，则会报错：ArgumentError: wrong number of arguments (1 for 2)&lt;/p&gt;

&lt;h2 id='retunr'&gt;retunr范围&lt;/h2&gt;

&lt;p&gt;在一个方法内使用Proc/lambda时，在bar方法中，如果Proc内包含了return，则执行到Proc内的return就不再往下执行。换言之，proc的return是作用于整个方法的。 而在bar方法中，lambda的return将不会影响方法的继续执行，lambda的return仅仅作用于代码块的内部。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby里yeild和block的用法</title>
   <link href="http://username.github.com/technology/2012/10/26/rubyliyeildheblockdeyongfa"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2012/10/26/rubyliyeildheblockdeyongfa</id>
   <content type="html">&lt;hr /&gt;
&lt;h2 id='rubyyeildblock'&gt;Ruby里yeild和&amp;amp;block的用法&lt;/h2&gt;
&lt;br /&gt;
&lt;h3 id='id65'&gt;例子：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;class Box
   def do(who,kind,&amp;amp;block)
     &amp;quot;#{who} #{yield} #{kind} #{self.class}&amp;quot;
   end
end

#这个方法里，&amp;amp;block作为一个代码块参数，被yield所调用。
#注意这里的&amp;amp;block只能作为最后一个参数，否则会报错。

box = Box.new
box.do(&amp;quot;I&amp;quot;,&amp;quot;iron&amp;quot;){ return &amp;quot;open&amp;quot; }
#=&amp;gt; &amp;quot;I open iron Box&amp;quot;

box.do(&amp;quot;She&amp;quot;,&amp;quot;wooden&amp;quot;){ &amp;quot;kick&amp;quot; }
#=&amp;gt; &amp;quot;She kick wooden Box&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id66'&gt;让我们来做一个改进版：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;class People
  def initialize(name)
      @name = name
  end
  attr_reader :name
end

class Box
  def initialize(kind)
      @kind = kind
  end
  def is_done(who, &amp;amp;block)
      if who.class == People
          &amp;quot;#{@kind} #{self.class} #{yield} by #{who.name}&amp;quot;
      else
          &amp;quot;#{who} not a people&amp;quot;
      end
  end
end

#因为kind并非is_done的固有属性，而是Box的属性，所以它是作为一个参数传进box对象
#而is_done则是作为Box的被动语态，所以is_done方法属于box

daniel = new people(&amp;quot;Daniel&amp;quot;)
box = Box.new(&amp;quot;wooden&amp;quot;)

box.is_done(daniel){ &amp;quot;open&amp;quot; }
#=&amp;gt; &amp;quot;wooden Box open by Daniel&amp;quot;

box.is_done(&amp;quot;bird&amp;quot;){ &amp;quot;open&amp;quot; }
#=&amp;gt; &amp;quot;bird not a people&amp;quot; &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>浅析Ruby里的几个动态方法（二），method_missing方法</title>
   <link href="http://username.github.com/technology/2012/10/26/qianxirubylidejigedongtaifangfa2method_missingfangfa"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2012/10/26/qianxirubylidejigedongtaifangfa2method_missingfangfa</id>
   <content type="html">&lt;h2 id='method_missing_'&gt;method_missing 方法是什么？&lt;/h2&gt;

&lt;p&gt;method_missing方法是Kernel模块（也就是Ruby中最底层模块）的一个方法。 什么时候调用method_missing方法？ 当一个对象调用它并没有定义的方法时，就会调用method_missing方法，听起来有点绕口，让我们来看一个例子:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obj = Object.new
obj.send :undefined_method
=&amp;gt; NoMethodError: undefined method &amp;#39;undefined_method&amp;#39; for #&amp;lt;Object:0x848d534&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当我们看到 &amp;#8220;=&amp;gt; NoMethodError: undefined method &amp;#8216;undefined_method&amp;#8217; for #&lt;a href='Object:0x848d534'&gt;Object:0x848d534&lt;/a&gt;&amp;#8220;这短消息的之前，obj发现它并没有定义undefined_method方法，于是Kernel#method_missing就会抛出一个NoMethodError响应。就像你让一个人去回忆并非发生在他身上的事情时，他搜索了自己的所有记忆，最终回答：“唔，我不记得了。” 如果我们重写某个对象的method_missing方法，它调用并不存在的方法时，就会自动调用method_missing方法,因此我们称它为幽灵方法。当你在死亡笔记上写并不存在的人名时，幽灵就会出来代替那个名字哦。 :) 再举个例子看看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def obj.method_missing(method, *args)
   puts &amp;quot;You called #{method}&amp;quot;
end
obj.unknow_method(1,2)

#=&amp;gt; You called unknow_method&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，这里一定要写&lt;em&gt;args这个形式参数，否则调用unknow_method时包含参数的话，会抛出“ArgumentError: wrong number of arguments”的错误。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id='method_missing_'&gt;method_missing 的作用是什么？&lt;/h2&gt;

&lt;p&gt;我们再来举个例子看看method_missing 方法的强大之处：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Box
  def method_missing(method, *args, &amp;amp;block)
      return
      return
      super
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的super是调用祖先类的同名方法，因为只有Kernel 存在method_missing，它将最后调用Kernel#method_missing 如果说send方法是用于动态调用已经存在的方法，那么method_missing方法则是去动态生成并不存在的方法。那么我们能否动态地改变已存在的方法的内部信息呢？直接执行obj.method;puts &amp;#8220;modified&amp;#8221;;end就行了。 :)&lt;/p&gt;

&lt;h2 id='method_missing'&gt;什么时候使用method_missing方法？&lt;/h2&gt;

&lt;p&gt;method_missing方法一般用于missing同一类命名模式中的方法。 例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TEMPLATE_CALL_METHODS = [:email_template, :header_menu_msg_template, :recent_activity_msg_template]

def method_missing(str, *args)
	if TEMPLATE_CALL_METHODS.include? str
       @viewer = args.shift
       template = &amp;quot;#{str}_for_#{operation_name}&amp;quot;
       if respond_to? template
         send template
       else
         send email_template_name
       end
     else
       super
     end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而不要这样单纯把method_missing方法用作一个防止抛异常方法。错误的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CATCH_METHODS = [:profile, :email, :full_name]
def method_missing(str, *args)
	if CATCH_METHODS.include? str
		nil
	else
		super
	end
end&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>浅析Ruby里的几个动态方法（一），send方法</title>
   <link href="http://username.github.com/technology/2012/10/26/qianxirubylidejigedongtaifangfa1sendfangfa"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2012/10/26/qianxirubylidejigedongtaifangfa1sendfangfa</id>
   <content type="html">&lt;p&gt;动态方法，是去控制静态方法的方法，让静态方法的方法名和方法的内容会根据参数的变化而变化，简而言之，他使方法成为了一个变量。让我们通过一个多态实例，来理解一下最简单的动态方法send。&lt;/p&gt;

&lt;p&gt;所谓多态就是把不同种类的东西当作相同的东西来处理。比如我要打开三个箱子，打开的方法都不同，如果发出同样打开箱子的命令，3个人都会以自己的方法来打开箱子。在编程中，“打开箱子”的命令，我们称之为消息；而打开不同箱子的具体操作，我们称之为方法。&lt;/p&gt;

&lt;p&gt;示范程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def box1.open
  puts(&amp;quot;open box&amp;quot;)
end

def box2.open
     puts(&amp;quot;open lock and open box&amp;quot;)
end

def box3.open
      puts(&amp;quot;It&amp;#39;s a open box&amp;quot;)
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里设置了box1、box2、box3三个方法，但是当我们预先并不知道要调用哪一个box方法时，就会写出类似下列这样的when……case表达式，在面向对象中这种写法是较为丑陋的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def open(num)
  case num
  when 1;puts(&amp;quot;open box&amp;quot;)
  when 2;puts(&amp;quot;open lock and open box&amp;quot;)
  when 3;puts(&amp;quot;It&amp;#39;s a open box&amp;quot;)
  when 4;puts(&amp;quot;I can&amp;#39;t open box&amp;quot;)
  when 5;puts(&amp;quot;Oh shit box!&amp;quot;)
  end
end

box.open(1)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们加上使用send方法，就可以将case……when给解藕，使程序降低了耦合性，增加了拓展性。send方法的作用是将一个方法传递给对象，例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.send(:+,2)
&amp;gt;3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面的例子是解藕def open(num)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Box
  def open_1
      puts &amp;quot;open box&amp;quot;
  end

  def open_2
      puts &amp;quot;open lock and open box&amp;quot;
  end

  def open_3
      puts &amp;quot;It&amp;#39;s a open box&amp;quot;
  end

  def open_4
      puts &amp;quot;I can&amp;#39;t open box&amp;quot;
  end

  def open_5
      puts &amp;quot;Oh shit box!&amp;quot;
  end  
end

box = Box.new

box.send(&amp;quot;open_#{num}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，将num作为参数，用的open_num方法。 但这里需要注意的是，send方法太过强大，可以调用任何方法，包括私有方法，使用public_send方法将能够尊重方法接受者的隐私权，可以用它来代替send方法。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>模式识别</title>
   <link href="http://username.github.com/essay/2012/10/26/moshishibie"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/10/26/moshishibie</id>
   <content type="html">&lt;h3 id='id61'&gt;一：什么是模式&lt;/h3&gt;

&lt;p&gt;人类有许多智慧是存在于右脑的，右脑有一个非常重要的功能就是模式的判断和识别（参考《非理性市场与蜥蜴式大脑思维》和《程序员的思维修炼》），善用这一点，常常能极大的提高自己的能力。为了说明模式的威力，举几个例子：&lt;/p&gt;

&lt;p&gt;棋类高手，许多人提到过，象棋或者围棋高手和一般棋手最大的区别在于精通许多模式（套路），能够快速的进行判断（御立上资《战略思维的艺术》）&lt;/p&gt;

&lt;p&gt;科学模型，特别是经济模型和金融建模，比如经济学中的循环流量图，将繁复多变的现实转变为可以理解和运算的抽象。&lt;/p&gt;

&lt;p&gt;（这个例子来源于另一网友） 数学，有一个好友是安徽省的高考状元，我和他谈及学习，他印象最深刻的是数学，他说他在北大学习期间经常做数学家教，虽然隔了几年，但许多题目一看上去就知道其套路，甚至答案都记得，因为做的太多，许多题目他都做过至少二十遍。&lt;/p&gt;

&lt;p&gt;（这个例子来源于另一网友）咨询，我刚开始做咨询的时候，非常崇尚逻辑，认定这是解决问题的最佳方法。但参与一些项目，发现并不顺手，《金字塔原理》也起不到什么作用，后来经人指点，发现BCG和麦肯锡推崇的假设思考的方法非常有效，假设思考的本质，就是一种右脑进行模式识别（假定关键问题/解决方案等），左脑进行逻辑推理（寻找数据/事实和论证）的过程。&lt;/p&gt;

&lt;p&gt;模式究竟是什么？它是可以是一套达成目标的实现流程，也可以是表现现实的抽象形态。&lt;/p&gt;

&lt;p&gt;理解模式，即是理解什么样的事物倾向于联系到一起或一起发生。如果我们知道世界运作的模式，这个世界就会成为一个可以预测和控制的地方。&lt;/p&gt;

&lt;h3 id='id62'&gt;二：理解趋势：&lt;/h3&gt;

&lt;p&gt;理解模式之前，首先谈论一下“趋势、倾向、大势”一系列概念，实际上，它们所代表的都是一个意思：趋势指的就是一个大概率事件，随着时间的推移表现出发生的频率：吸烟者更容易得肺癌、受教育程度越高越容易获得高工资。解释某个趋势：猜测、验证趋势的变量及其相互作用，解释谁对谁正在做什么、在哪里做、怎样做的，以及为什么会这样做，是获得“真正的模式”的第一个步骤。看到趋势和倾向，只是理解这些事情的第一步，一旦我们确认了这一趋势，我们就可开始尽可能地识洞察别出产生它的人类行动，如果我们意识不到这一趋势，我们可能也就意识不到，在它背后到底有有什么行动值得关注。&lt;/p&gt;

&lt;p&gt;通过辨认趋向，我们也可以获得一种关于我们将会往哪里去的看法。如果公司持续裁员和让人失业，结果会怎样呢？如果贫富差距持续拉大，又会怎样呢？如果越来越多的人都感觉到无法控制自己的生活，又会怎样？这些趋势会导向哪里？将会出现什么新的问题？&lt;/p&gt;

&lt;p&gt;一个普通人看新闻也许只会看到媒体告诉你的趋势，但你一旦拥有足够的行业知识或科学知识，你就能验证这些趋势，获取它的原因和变量—&amp;gt;继而理解趋势（预测未来），—&amp;gt; 开始从事那些被低估的事情，学习被低估的经验和技能，买入被低估的资产。&lt;/p&gt;

&lt;p&gt;如何理解趋势？&lt;/p&gt;

&lt;p&gt;最简单的方法是运用别人已经给出的“模式”，当然在大多数时候，它们仅仅是“模式的碎片”——诸如金融模型、前人经验、麦肯锡的方法论、或者只是自身的直觉……&lt;/p&gt;

&lt;p&gt;这个问题十本书也不见得写得完，何况是一篇小小的博文。这方面的方法论可以推荐时寒冰的 大道至简系列 和 查理芒格的 穷查理宝典 ，除此之外，统计学、逻辑学、心理学的等等一些基本功都必不可少。&lt;/p&gt;

&lt;h3 id='id63'&gt;三：再说模式&lt;/h3&gt;

&lt;p&gt;模式究竟是什么？，就是存在于我们大脑中的那幅图像，当我们面临一个问题的时候，有经验的人常常有一个立刻的判断Malcolm Gladwell 《Blink》。这种直觉的判断基于经验，立体而真实，没有经验的人，大脑中反映的则常常是一些散乱的信号。经验产生的这幅图像，客观的看，未必是正确的，就算是正确，也未必是最优的。善于建立这种图像，不断的更新这种图像，不断的提升模式的应用能力，才能产生经验的快速积累效应。&lt;/p&gt;

&lt;p&gt;模式的缺点是什么呢？右脑是很感性的，形象的说，这幅图像，本身是残缺的、模糊的、充满了谬论、错误和噪音，并随着时间的流逝，记忆不断的淡化。如果固守自己仅有的经验，固守心中那个未必正确的图像，最终，这幅图像，或者说你的经验，一定会过时，因此建立和更新比不可少&lt;/p&gt;

&lt;h3 id='id64'&gt;四：更新模式&lt;/h3&gt;

&lt;p&gt;所以我们发现，我们实际上要学习的是建立模式和更新模式的能力，而实际上，模式并非creat出来的，而是update出来的。一开始，我们只能看到问题的一个角度：经济学者用经济学和数学模拟世界，哲学家用逻辑学和哲学猜想世界，计算机专家用硬件软件编译世界……然后慢慢的我们看世界的角度越来越多，也越来越看不懂，总觉得面前有层膜在阻挡着真理，实际上不只有一层膜，前面是无数的谬论、二阶不可知以及持续变化的事实。随着我们看问题的角度越来越多，也越来越深，我们不断update世界观。&lt;/p&gt;

&lt;p&gt;“完成总比完美好”——Facebook创始人马克·扎克伯格。&lt;/p&gt;

&lt;p&gt;这句话的意思是说完美的模式不存于世界，我们只能不断地完成，不断update。归结到最后的能力，其实是update模式的能力。&lt;/p&gt;

&lt;p&gt;任何一种能力都是知识和经验的有机组合。更新模式的能力同样如此，最简便的方法就是研究和学习，这里所说的研究学习和人们所认为不一样。在以往的应试教育中，所谓的学习大多是捉知识点，去放到一个恰当的问题里解决。但在完成了应试教育后，很多人甚至不知道什么是”问题”，更谈不上解决。也就是“二阶不可知”：你不知道自己不知道什么。在真实世界里，信息点甚至很多知识点都是杂乱而低效的，而理论面又是抽象的，不具体，无执行步骤，更谈不上执行力。&lt;/p&gt;

&lt;p&gt;模式的作用在于探索哪些是真正的点，而哪些是干扰的。就算一个很有用的点，放错了模式有害无益。好比做销售的注重于产品的实现技术而非用户体验，体验不行技术再好也是白搭。&lt;/p&gt;

&lt;p&gt;高效的模式的特征必定是低投入高产出，简单而迅速。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>梦旅人</title>
   <link href="http://username.github.com/essay/2012/10/26/menglvren"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/10/26/menglvren</id>
   <content type="html">&lt;p&gt;几年前，蔡康永在他主持的节目《今天不读书》上介绍了本很有意思的书——《革命前夕的摩托车之旅》。在大陆，这本书并不太出名。但书中主角是很多人（特别是老一辈）熟悉而且感兴趣的人物——切 格瓦拉。&lt;/p&gt;

&lt;p&gt;书名顾名思义，主要内容大致是切 格瓦拉在南美革命前，他一连串丰盛而动人心魄的旅行生活。&lt;/p&gt;

&lt;p&gt;切 ·格瓦拉出身于一个生活富足中产阶级，年轻的他聪慧、敏感、富有洞察力却放荡不羁，但是书中的那个他却不是不同于大众所认识的那个勇敢、高尚的革命家。&lt;/p&gt;

&lt;p&gt;切·格瓦拉在南美各地穿梭游历时，过惯了富足生活的他强烈地苦恼于南美的贫乏和不公。他感到了强烈的反差。&lt;/p&gt;

&lt;p&gt;相反，本身贫穷的人反倒很难感受到“吃窝窝头是不公平的，政府应该提供有足够营养的饭菜”。&lt;/p&gt;

&lt;p&gt;不仅如此，切 格瓦拉对底层的人并不只存在单纯的同情和浅薄的感动，他能深入人心。有一次，他在旅途中碰见一个在路边无家可归老妪在街边乞讨时，忽然了解到在贫穷的家庭中还需要老人去挣钱养家。当老人无法工作时，就会成为家庭的负累。——感到那种老人祈求家人原谅的卑微愿望时，忽然击中了他的心脏。这样一种打击对本身很有诗人气质格瓦拉无疑是种精神上的地震。&lt;/p&gt;

&lt;p&gt;从书里面更多的可以看到的是作为追寻者、旅行者、革命家、梦想家的切·格瓦拉，面对现实产生了不可调节的矛盾。&lt;/p&gt;

&lt;p&gt;革命家需要不停地去革命、不断地去革命。革命需要的是“不可能”，但政治恰恰需要的是“可能”。政治是被称为妥协的艺术，但革命不能妥协。这种对立为切 格瓦拉辞去中国央行行长一职埋下了伏笔。他以心以血要去当他的“玻利瓦尔”，去不断地革命。&lt;/p&gt;

&lt;p&gt;这一群人，如此地处于一种浪漫的、理想化的气质之中，旅者那样不断流浪、发现、再流浪；革命、成功、再革命。就算抵达成功的彼岸，回望灯火阑珊时，依旧无法卸下旅行和梦想的翅膀。&lt;/p&gt;

&lt;p&gt;历史中，当文化、社会出现巨大变化的时候总会出现他们的身影：盲人或先知般齐齐涌向时代的潮头——美国的披头士、垮掉的一代；《in the road》的乔治 凯鲁亚克、《嚎叫》的艾伦 金斯堡、《荒野生存》、《发条橙》；日本的夏目漱石、太宰治，充斥着自由、毒品、摇滚的那一代；中国宣扬着个性化和现代化，冒出一群又一群的诗人、文人和摇滚乐队的八十年代，他们或是反对物质，倡导精神独立，宣扬着绝对自由，鄙夷现状，摇旗呐喊。滑稽、悲哀而自得其乐地绽放着青春的曙光，某些人物，不自觉地标记着一代人最珍贵最隐秘的梦想，星散四处，你不以为意，像在盛大海洋中永不苍老的精卫的嘶鸣。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>程序员的十层楼（转载）</title>
   <link href="http://username.github.com/technology/2012/10/26/chengxuyuandeshicengliu-zhuanzai"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2012/10/26/chengxuyuandeshicengliu-zhuanzai</id>
   <content type="html">&lt;p&gt;第1层 菜鸟&lt;/p&gt;

&lt;p&gt;第1层楼属于地板层，迈进这层楼的门槛是很低的。基本上懂计算机的基本操作，了解 计算机专业的一些基础知识，掌握一门基本的编程语言如C/C++，或者Java，或者 JavaScript，&amp;#8230;，均可入门迈进这层。&lt;/p&gt;

&lt;p&gt;在这层上，中国有着绝对的优势，除了从计算机专业毕业的众多人数外，还有大量的通 信、自动化、数学等相关专业的人士进入这一行，此外还有众多的其他专业转行的人士，人 数绝对比西方多出甚多。并且还有一个优势就是我们这层人员的平均智商比西方肯定高。 没有多少人愿意一辈子做菜鸟，因为做&amp;#8221;菜鸟&amp;#8221;的滋味实在是不咋的，整天被老大们吆喝 着去装装机器，搭建一下测试环境，或者对照着别人写好的测试用例做一些黑盒测试，好一 点的可以被安排去写一点测试代码。当然如果运气&amp;#8221;好&amp;#8221;的话，碰到了国内的一些作坊式的公 司，也有机会去写一些正式的代码。&lt;/p&gt;

&lt;p&gt;所以，菜鸟们总是在努力学习，希望爬更高的一层楼去。&lt;/p&gt;

&lt;p&gt;第2层 大虾&lt;/p&gt;

&lt;p&gt;从第1层爬到第2层相对容易一些，以C/C++程序员为例，只要熟练掌握C/C++编程语 言，掌握C标准库和常用的各种数据结构算法，掌握STL的基本实现和使用方法，掌握多 线程编程基础知识，掌握一种开发环境，再对各种操作系统的API都去使用一下，搞网络 编程的当然对socket编程要好好掌握一下，然后再学习一些面向对象的设计知识和设计模 式等，学习一些测试、软件工程和质量控制的基本知识，大部分人经过2～3年的努力，都 可以爬到第2层，晋升为&amp;#8221;大虾&amp;#8221;。&lt;/p&gt;

&lt;p&gt;中国的&amp;#8221;大虾&amp;#8221;数量和&amp;#8221;菜鸟&amp;#8221;数量估计不会少多少，所以这层上仍然远领先于西方。 大虾们通常还是有些自知之明，知道自己只能实现一些简单的功能，做不了大的东西， 有时候还会遇到一些疑难问题给卡住，所以他们对那些大牛级的人物通常是非常崇拜的，国 外的如Robert C. Martin、Linus Torvalds，国内的如求伯君、王志东等通常是他们崇拜的对 象。其中的有些人希望有一天也能达到这些大牛级人物的水平，所以他们继续往楼上爬去。&lt;/p&gt;

&lt;p&gt;第3层 牛人 由于&amp;#8221;大虾&amp;#8221;们经常被一些疑难问题给卡住，所以有了&amp;#8221;大虾&amp;#8221;们只好继续学习，他们需要 将原来所学的知识进一步熟练掌握，比如以熟练掌握C++编程语言为例，除了学一些基础性 的C++书籍如《C++ Primer》，《Effective C++》，《Think in C++》，《Exception C++》等之外， 更重要的是需要了解C++编译器的原理和实现机制，了解操作系统中的内部机制如内存管 理、进程和线程的管理机制，了解处理器的基础知识和代码优化的方法，此外还需要更深入 地学习更多的数据结构与算法，掌握更深入的测试和调试知识以及质量管理和控制方法，对 各种设计方法有更好的理解等。&lt;/p&gt;

&lt;p&gt;学习上面说的这些知识不是一挥而就的，不看个三五十本书并掌握它是做不到的。以数 据结构算法来说，至少要看个5～10本这方面的著作；以软件设计来说，光懂结构化设计、 面向对象设计和一些设计模式是不够的，还要了解软件架构设计、交互设计、面向方面的设 计、面向使用的设计、面向数据结构算法的设计、情感化设计等，否则是很难进到这个楼层 的。&lt;/p&gt;

&lt;p&gt;当然除了上面说的知识外，大虾们还需要去学习各种经验和技巧。当然这点难不倒他们， 现在出版的书籍众多，网络上的技术文章更是不胜数，然后再去各种专业论坛里泡一泡，把 这些书籍和文章中的各种经验、技能、技巧掌握下来，再去学习一些知名的开源项目如 Apache或Linux操作系统的源代码实现等。此时对付一般的疑难问题通常都不在话下，菜 鸟和大虾们会觉得你很&amp;#8221;牛&amp;#8221;，你也就爬到了第3层，晋升为&amp;#8221;牛人&amp;#8221;了。&lt;/p&gt;

&lt;p&gt;看了上面所讲的要求，可能有些大虾要晕过去了，成为牛人要学这么多东西啊！要求是 不是太高了？其实要求一点也不高，这么点东西都掌握不了的话，怎么能让别人觉得你&amp;#8221;牛&amp;#8221;呢？&lt;/p&gt;

&lt;p&gt;需要提一下的是，进入多核时代后，从第2层爬到第3层增加了一道多核编程的门槛。 当然要迈过这道门槛并不难，已经有很多前辈高人迈进了这道门槛，只要循着他们的足迹前 进就可以了。想迈进这道门槛者不妨去学习一下TBB开源项目的源代码(链接： http://www.threadingbuildingblocks.org/ )，然后上Intel的博客 （http://software.intel.com/zh-cn/blogs/ ）和多核论坛 （http://forum.csdn.net/Intel/IntelMulti-core/ ）去看看相关文章，再买上几本相关的书籍学习 一下。&lt;/p&gt;

&lt;p&gt;在国内， 一旦成为&amp;#8221;牛人&amp;#8221;，通常可以到许多知名的公司里去，运气好者可以挂上一个 架构师的头衔，甚至挂上一个&amp;#8221;首席架构师&amp;#8221;或者&amp;#8221;首席xx学家&amp;#8221;的头衔也不足为奇。有不少 爬到这层的人就以为到了楼顶了，可以眼睛往天上看了，开始目空一切起来，以为自己什么 都可以做了，什么都懂了，经常在网络上乱砸板砖是这个群体的最好写照。由此也看出，国 内的牛人数量仍然众多，远多于西方的牛人数量，在这层上仍然是领先的。&lt;/p&gt;

&lt;p&gt;也有不少谦虚的&amp;#8221;牛人&amp;#8221;，知道自己现在还不到半桶水阶段。他们深知爬楼的游戏就像猴 子上树一样，往下看是笑脸，往上看是屁股。为了多看笑脸，少看屁股，他们并没有在此停 步不前，而是继续寻找到更上一层的楼梯，以便继续往上爬。&lt;/p&gt;

&lt;p&gt;第4层 大牛&lt;/p&gt;

&lt;p&gt;从第3层爬到第4层可不像上面说过的那几层一样容易，要成为大牛的话，你必须要能 做牛人们做不了的事情，解决牛人们解决不了问题。比如牛人们通常都不懂写操作系统，不 会写编译器，不懂得TCP/IP协议的底层实现，如果你有能力将其中的任何一个实现得象模 象样的话，那么你就从牛人升级为&amp;#8221;大牛&amp;#8221;了。&lt;/p&gt;

&lt;p&gt;当然，由于各个专业领域的差别，这里举操作系统、编译器、TCP/IP协议只是作为例 子，并不代表成为&amp;#8221;大牛&amp;#8221;一定需要掌握这些知识，以时下热门的多核编程来说，如果你能比 牛人们更深入地掌握其中的各种思想原理，能更加自如的运用，并有能力去实现一个象开源 项目TBB库一样的东西，也可以成为&amp;#8221;大牛&amp;#8221;，又或者你能写出一个类似Apache一样的服务 器，或者写出一个数据库，都可以成为&amp;#8221;大牛&amp;#8221;。&lt;/p&gt;

&lt;p&gt;要成为&amp;#8221;大牛&amp;#8221;并不是一件简单的事情，需要付出比牛人们多得多的努力，一般来说，至 少要看过200~400本左右的专业书籍并好好掌握它，除此之外，还得经常关注网络和期刊杂 志上的各种最新信息。&lt;/p&gt;

&lt;p&gt;当&amp;#8221;牛人&amp;#8221;晋升为&amp;#8221;大牛&amp;#8221;，让&amp;#8221;牛人们&amp;#8221;发现有比他们更牛的人时，对&amp;#8221;牛人&amp;#8221;们的心灵的震 撼是可想而知的。由于牛人们的数量庞大，并且牛人对大虾和菜鸟阶层有言传身教的影响， 所以大牛们通常能获得非常高的社会知名度，几乎可以用&amp;#8221;引无数菜鸟、大虾、牛人竞折腰&amp;#8221; 来形容，看看前面提过的Linus Torvalds等大牛，应该知道此言不虚。&lt;/p&gt;

&lt;p&gt;虽然成为&amp;#8221;大牛&amp;#8221;的条件看起来似乎很高似的，但是这层楼并不是很难爬的一层，只要通 过一定的努力，素质不是很差，还是有许多&amp;#8221;牛人&amp;#8221;可以爬到这一层的。由此可知，&amp;#8221;大牛&amp;#8221;这 个楼层的人数其实并不像想像的那么少，例如比尔·盖茨之类的人好像也是属于这一层的 由于&amp;#8221;大牛&amp;#8221;这层的人数不少，所以也很难统计除到底是中国的&amp;#8221;大牛&amp;#8221;数量多还是西方的 大牛数量多？我估计应该是个旗鼓相当的数量，或者中国的&amp;#8221;大牛&amp;#8221;们会更多一些。&lt;/p&gt;

&lt;p&gt;看到这里，可能会有很多人会以为我在这里说瞎话，Linus Torvalds写出了著名的Linux 操作系统，我国并没有人写出过类似的东西啊，我国的&amp;#8221;大牛&amp;#8221;怎么能和西方的比呢? 不知大 家注意到没有，Linus Torvalds只是写出了一个&amp;#8221;象模象样&amp;#8221;的操作系统雏形，Linux后来真正 发展成闻名全球的开源操作系统期间，完全是因为许多支持开源的商业公司如IBM等，派 出了许多比Linus Torvalds更高楼层的幕后英雄在里面把它开发出来的。&lt;/p&gt;

&lt;p&gt;可能有些菜鸟认为Linus Torvalds是程序员中的上帝，不妨说个小故事： Linus，Richard Stallman和Don Knuth（高德纳）一同参加一个会议。 Linus 说：&amp;#8221;上帝说我创造了世界上最优秀的操作系统。&amp;#8221;&lt;/p&gt;

&lt;p&gt;Richard Stallman自然不甘示弱地说：&amp;#8221;上帝说我创造了世界上最好用的编译器。&amp;#8221; Don Knuth一脸疑惑的说：&amp;#8221;等等，等等，我什么时候说过这些话？&amp;#8221;&lt;/p&gt;

&lt;p&gt;由此可以看出，Linus Torvalds的技术水平并不像想像中那么高，只是&amp;#8221;牛人&amp;#8221;和&amp;#8221;大虾&amp;#8221; 觉得&amp;#8221;大牛&amp;#8221;比他们更牛吧了。在我国，有一些当时还处于&amp;#8221;大虾&amp;#8221;层的人物，也能写出介绍如 何写操作系统的书，并且书写得非常出色，而且写出了一个有那么一点点象模象样的操作系 统来。我想中国的&amp;#8221;大牛&amp;#8221;们是不会比西方差的，之所以没有人写出类似的商业产品来，完全 是社会环境的原因，并不是技术能力达不到的原因。&lt;/p&gt;

&lt;p&gt;&amp;#8220;大牛&amp;#8221;们之所以成为大牛，主要的原因是因为把&amp;#8221;牛人&amp;#8221;给盖了下去，并不是他们自己觉 得如何牛。也许有很多菜鸟、大虾甚至牛人觉得&amp;#8221;大牛&amp;#8221;这层已经到顶了，但大多数&amp;#8221;大牛&amp;#8221;估 计应该是有自知之明的，他们知道自己现在还没有爬到半山腰，也就勉强能算个半桶水的水 平，其中有些爬到这层没有累趴下，仍然能量充沛，并且又有志者，还是会继续往更上一层 楼爬的。&lt;/p&gt;

&lt;p&gt;看到这里，也许有些菜鸟、大虾、牛人想不明白了，还有比&amp;#8221;大牛&amp;#8221;们更高的楼层，那会 是什么样的楼层？下面就来看看第5层楼的奥妙。&lt;/p&gt;

&lt;p&gt;第5层 专家&lt;/p&gt;

&lt;p&gt;当大牛们真正动手做一个操作系统或者类似的其他软件时，他们就会发现自己的基本功 仍然有很多的不足。以内存管理为例，如果直接抄袭Linux或者其他开源操作系统的内存管 理算法，会被人看不起的，如果自动动手实现一个内存管理算法，他会发现现在有关内存管 理方法的算法数量众多，自己并没有全部学过和实践过，不知道到底该用那种内存管理算法。 看到这里，可能有些人已经明白第5层楼的奥妙了，那就是需要做基础研究，当然在计 算机里，最重要的就是&amp;#8221;计算&amp;#8221;二字，程序员要做基础研究，主要的内容就是研究非数值&amp;#8221;计 算&amp;#8221;。&lt;/p&gt;

&lt;p&gt;非数值计算可是一个非常庞大的领域，不仅时下热门的&amp;#8221;多核计算&amp;#8221;与&amp;#8221;云计算&amp;#8221;属于非数 值计算范畴，就是软件需求、设计、测试、调试、评估、质量控制、软件工程等本质上也属 于非数值计算的范畴，甚至芯片硬件设计也同样牵涉到非数值计算。如果你还没有真正领悟 &amp;#8220;计算&amp;#8221;二字的含义，那么你就没有机会进到这层楼来。&lt;/p&gt;

&lt;p&gt;可能有人仍然没有明白为什么比尔·盖茨被划在了大牛层，没有进到这层来。虽然比尔·盖 茨大学未毕业，学历不够，但是家有藏书2万余册，进入软件这个行业比绝大部分人都早， 撇开他的商业才能不谈，即使只看他的技术水平，也可以算得上是学富五车，顶上几个普通 的计算机软件博士之和是没有问题的，比起Linus Torvalds之类的&amp;#8221;大牛&amp;#8221;们应该技高一筹才 对，怎么还进不了这层楼呢？&lt;/p&gt;

&lt;p&gt;非常遗憾的是，从Windows操作系统的实现来看，其对计算的理解是很肤浅的，如果 把Google对计算方面的理解比做大学生，比尔·盖茨只能算做一个初中生，所以比尔·盖茨永 远只能做个大牛人，成不了&amp;#8221;专家&amp;#8221;。&lt;/p&gt;

&lt;p&gt;看到这里，也许国内的大牛们要高兴起来了，原来比尔·盖茨也只和我等在同一个层次， 只要再升一层就可以超越比尔·盖茨了。不过爬到这层可没有从&amp;#8221;牛人&amp;#8221;升为&amp;#8221;大牛&amp;#8221;那么简单， 人家比尔·盖茨都家有2万多册书，让你看个500~1000本以上的专业书籍并掌握好它应该要 求不高吧。当然，这并不是主要的条件，更重要的是，需要到专业的学术站点去学习了，到 ACM，IEEE，Elsevier，SpringerLink，SIAM等地方去下载论文应该成为你的定期功课，使 用Google搜索引擎中的学术搜索更是应该成为你的日常必修课。此外，你还得经常关注是 否有与你研究相关的开源项目冒出来，例如当听到有TBB这样针对多核的开源项目时，你 应该第一时间到Google里输入&amp;#8221;TBB&amp;#8221;搜索一下，将其源代码下载下来好好研究一番，这样 也许你的一只脚已经快迈进了这层楼的门槛。&lt;/p&gt;

&lt;p&gt;当你象我上面说的那样去做了以后，随着时间的推移，总会有某天，你发现，在很多小 的领域里，你已经学不到什么新东西了，所有最新出来的研究成果你几乎都知道。此时你会 发现你比在做&amp;#8221;牛人&amp;#8221;和&amp;#8221;大牛&amp;#8221;时的水平不知高出了多少，但是你一点也&amp;#8221;牛&amp;#8221;不起来，因为你 学的知识和思想都是别人提出来的，你自己并没有多少自己的知识和思想分享给别人，所以 你还得继续往楼上爬才行。&lt;/p&gt;

&lt;p&gt;我不知道国内的&amp;#8221;专家&amp;#8221;到底有多少，不过有一点可以肯定的是，如果把那些专门蒙大家 的&amp;#8221;砖家&amp;#8221;也算上的话，我们的砖家比西方的要多得多。&lt;/p&gt;

&lt;p&gt;第6层 学者&lt;/p&gt;

&lt;p&gt;当&amp;#8221;专家&amp;#8221;们想继续往上一层楼爬时，他们几乎一眼就可以看到楼梯的入口，不过令他们 吃惊的是，楼梯入口处竖了一道高高的门槛，上面写着&amp;#8221;创新&amp;#8221;二字。不幸的是，大多数人在 爬到第5层楼时已经体能消耗过度，无力翻过这道门槛。&lt;/p&gt;

&lt;p&gt;有少数体能充足者，可以轻易翻越这道门槛，但是并不意味着体力消耗过度者就无法翻 越，因为你只是暂时还没有掌握恢复体能的方法而已，当掌握了恢复体能的方法，将体能恢 复后，你就可以轻易地翻越这道门槛了。&lt;/p&gt;

&lt;p&gt;怎么才能将体能恢复呢？我们的老祖宗&amp;#8221;孔子&amp;#8221;早就教导过我们&amp;#8221;温故而知新&amp;#8221;，在英文 里，研究的单词是&amp;#8221;research&amp;#8221;，其前缀&amp;#8221;re&amp;#8221;和&amp;#8221;search&amp;#8221;分别是什么意思不用我解释吧。或许有 些人觉得&amp;#8221;温故而知新&amp;#8221;和&amp;#8221;research&amp;#8221;有些抽象，不好理解，我再给打个简单的比方，比如你在 爬一座高山，爬了半天，中途体力不支，怎么恢复体力呢？自然是休息一下，重新进食一些 食物，体力很快就可以得到恢复。&lt;/p&gt;

&lt;p&gt;由此可知，对体能消耗过度者，休息＋重新进食通常是恢复体能的最佳选择。可惜的是， 国内的老板们并不懂得这点，他们的公司里不仅连正常国家规定的休息时间都不给足，有些 公司甚至有员工&amp;#8221;过劳死&amp;#8221;出现。所以国内能翻越&amp;#8221;创新&amp;#8221;这道门槛的人是&amp;#8221;少之又少&amp;#8221;，和西方 比起来估计是数量级的差别。&lt;/p&gt;

&lt;p&gt;再说说重新进食的问题，这个重新进食是有讲究的，需要进食一些基础性易消化的简单 食物，不能进食山珍海味级的复杂食物，否则很难快速吸收。以查找为例，并不是去天天盯 着那些复杂的查找结构和算法进行研究，你需要做的是将二分查找、哈希查找、普通二叉树 查找等基础性的知识好好地复习几遍。&lt;/p&gt;

&lt;p&gt;以哈希查找为例，首先你需要去将各种冲突解决方法如链式结构、二次哈希等编写一遍， 再试试不同种类的哈希函数，然后还需要试试在硬盘中如何实现哈希查找，并考虑数据从硬 盘读到内存后，如何组织硬盘中的数据才能快速地在内存中构建出哈希表来，&amp;#8230;，这样你可 能需要将一个哈希表写上十几个不同的版本，并比较各个版本的性能、功能方面的区别和适 用范围。&lt;/p&gt;

&lt;p&gt;总之，对任何一种简单的东西，你需要考虑各种各样的需求，以需求来驱动研究。最后 你将各种最基础性的查找结构和算法都了然于胸后，或许某天你再看其他更复杂的查找算 法，或者你在散步时，脑袋里灵光一现，突然间就发现了更好的方法，也就从专家晋升为&amp;#8221; 学者&amp;#8221;了。&lt;/p&gt;

&lt;p&gt;学者所做的事情，通常都是在前人的基础上，进行一些小的优化和改进，例如别人发明 了链式基数排序的方法，你第1个发现使用一定的方法，可以用数组替代链表进行基数排序， 性能还能得到进一步提高。&lt;/p&gt;

&lt;p&gt;由于学者需要的只是一些小的优化改进，因此中国还是有一定数量的学者。不过和国外 的数量比起来，估计少了一个数量级而已。 也许有人会觉得现在中国许多公司申请专利的数量达到甚至超过西方发达国家了，我们&lt;/p&gt;

&lt;p&gt;的学者数量应该不会比他们少多少。因此，有必要把专利和这里说的创新的区别解释一下。 所谓专利者，只要是以前没有的，新的东西，都可以申请专利；甚至是以前有的东西， 你把他用到了一个新的领域的产品里去，也可以申请专利。比如你在房子里造一个水泥柱子， 只要以前没有人就这件事申请专利，那么你就可以申请专利，并且下次你把水泥柱子挪一个 位置，又可以申请一个新的专利；或者你在一个柜子上打上几个孔，下次又把孔的位置改一 改，&amp;#8230;，均可申请专利。&lt;/p&gt;

&lt;p&gt;这层楼里所说的创新，是指学术层面的创新，是基础研究方面的创新，和专利的概念是 完全不同的，难度也是完全不同的。你即使申请了一万个象那种打孔一类的专利，加起来也 够不到这层楼里的一个创新。&lt;/p&gt;

&lt;p&gt;当你爬到第6层楼时，你也许会有一种突破极限的快感，因为你终于把那道高高的写着 &amp;#8220;创新&amp;#8221;二字的门槛给翻过去了，实现了&amp;#8221;0&amp;#8221;的突破。这时，你也许有一种&amp;#8221;独上高楼，欲望尽 天涯路&amp;#8221;的感觉，但是很快你会发现看到的都是比较近的路，远处的路根本看不清楚。如果 你还有足够的体力的话，你会想爬到更高一层的楼层去。&lt;/p&gt;

&lt;p&gt;第7层 大师&lt;/p&gt;

&lt;p&gt;从第6层楼爬到第7层楼，并没有多少捷径可走，主要看你有没有足够的能量。你如果 能象Hoare一样设计出一个快速排序的算法；或者象Eugene W. Myers一样设计出了一个用 编辑图的最短路径模型来解决diff问题的算法；或者象M.J.D. Powell一样提出了一个能够 处理非线性规划问题的SQP方法；或者你发现基于比较的排序算法，它的复杂度下界为 O(NLogN)；或者你发现用栈可以将递归的算法变成非递归的；或者你设计出一个红黑树或 者AVL树之类的查找结构；或者你设计出一个象C++或Java一样的语言；或者你发明了 UML；&amp;#8230;，你就爬到了第7层，晋升为&amp;#8221;大师&amp;#8221;了。&lt;/p&gt;

&lt;p&gt;上面举的这些例子中，其中有些人站的楼层比这层高，这里只是为了形象说明而举例他 们的某个成就。从上面列出的一些大师的贡献可以看出，成为大师必须要有较大的贡献。首 先解决问题必须是比较重要的，其次你要比前辈们在某方面有一个较大的提高，或者你解决 的是一个全新的以前没有解决过的问题；最重要的是，主要的思路和方法必须是你自己提供 的，不再是在别人的思路基础上进行的优化和改进。&lt;/p&gt;

&lt;p&gt;看了上面这些要求，如果能量不够的话，你也许会觉得有些困难，所以不是每个人都能 成为&amp;#8221;大师&amp;#8221;的。中国软件业里能称得上是&amp;#8221;大师&amp;#8221;的人，用屈指可数来形容，估计是绰绰有余。 值得一提得是，国外的&amp;#8221;大师&amp;#8221;就象我们的&amp;#8221;大牛&amp;#8221;一样满天飞的多。&lt;/p&gt;

&lt;p&gt;我把我猜测本国有可能进到这层楼的大师列一下，以起个抛砖引玉的作用。汉王的&amp;#8221;手 写识别&amp;#8221;技术由于是完全保密的，不知道它里面用了什么思想，原创思想占的比重有多少， 因此不知道该把它划到这层楼还是更高一层楼去。原山东大学王小云教授破解DES和MD5 算法时，用到的方法不知道是不是完全原创的，如果是的话也可进到这层楼来。&lt;/p&gt;

&lt;p&gt;陈景润虽然没有彻底解决哥德巴赫猜想，但他在解决问题时所用的方法是创新的，因此 也可以进到这层楼来。当然，如果能彻底解决哥德巴赫猜想，那么可以算到更高的楼层去。 求伯君和王志东等大牛们，他们在做WPS和表格处理之类的软件时，不知是否有较大 的原创算法在里面，如果有的话就算我错把他们划到了大牛层。由于所学有限，不知道国内 还有那些人能够得上&amp;#8221;大师&amp;#8221;的级别，或许有少量做研究的教授、院士们，可以达到这个级别， 有知道的不妨回个帖子晾一晾。&lt;/p&gt;

&lt;p&gt;鉴于&amp;#8221;大师&amp;#8221;这个称号的光环效应，相信有不少人梦想着成为&amp;#8221;大师&amp;#8221;。或许你看了前面举 的一些大师的例子，你会觉得要成为大师非常困难。不妨说一下，现在有一条通往&amp;#8221;大师&amp;#8221; 之路的捷径打开了，那就是多核计算领域，有大量的处女地等待大家去挖掘。 以前在单核时代开发的各种算法，现在都需要改写成并行的。数据结构与算法、图像处 理、数值计算、操作系统、编译器、测试调试等各个领域，都存在大量的机会，可以让你进&lt;/p&gt;

&lt;p&gt;到这层楼来，甚至有可能让你进到更高一层楼去。&lt;/p&gt;

&lt;p&gt;第8层 科学家&lt;/p&gt;

&lt;p&gt;科学家向来都是一个神圣的称号，因此我把他放在了“大师”之上。要成为科学家，你的 贡献必须超越大师，不妨随便举一些例子。&lt;/p&gt;

&lt;p&gt;如果你象Dijkstra一样设计了ALGOL语言，提出了程序设计的三种基本结构：顺序、 选择、循环，那么你可以爬到第8层楼来。顺便说一下，即使抛开这个成果，Dijkstra凭他 的PV操作和信号量概念的提出，同样可以进到这层楼。 如果你象Don Knuth一样，是数据结构与算法这门学科的重要奠基者，你也可以进到这 层楼来。当然，数据结构和算法这门学科不是某个人开创的，是许多大师和科学家集体开创 的。&lt;/p&gt;

&lt;p&gt;如果你象巴科斯一样发明了Fortran语言，并提出了巴科斯范式，对高级程序语言的发 展起了重要作用，你也可以进到这层楼来。 或者你象Ken Thompson、Dennis Ritchie一样发明了Unix操作系统和功能强大、高效、 灵活、表达力强的C语言，对操作系统理论和高级编程语言均作出重大贡献，那么你也可 以进到这层楼来。&lt;/p&gt;

&lt;p&gt;或者你有Frederick P. Brooks一样机会，可以去领导开发IBM的大型计算机System/360 和OS/360操作系统，并在失败后反思总结，写出《人月神话》，对软件工程作出里程碑式 的贡献，你也可以进到这层来。&lt;/p&gt;

&lt;p&gt;或者你提出了面向对象设计的基本思想，或者你设计了互联网的TCP/IP协议，或者你 象Steven A.Cook一样奠定NP完全性的理论基础，或者你象Frances Allen一样专注于并行 计算来实现编译技术，在编译优化理论和技术取得基础性的成就，…，均可进入这层。 当然，如果你发明了C++语言或者Java语言，你进不到这层来，因为你用到的主要思 想都是这层楼中的科学家提出的，你自己并没有没有多少原创思想在里面。&lt;/p&gt;

&lt;p&gt;看了上面列出的科学家的成就，你会发现，要成为“科学家”，通常要开创一门分支学科， 或者是这个分支学科的奠基者，或者在某个分支学科里作出里程碑式的重大贡献。如果做不 到这些的话，那么你能象Andrew C. Yao（姚期智）一样在对计算理论的多个方向如伪随机 数生成，密码学与通信复杂度等各个方向上作出重要贡献，成为集大成者，也可以进入这层 楼。&lt;/p&gt;

&lt;p&gt;成为“科学家”后，如果你有幸象Dijkstra一样，出现在一个非常重视科学的国度。当你 去世时，你家乡满城的人都会自动地去为你送葬。不过如果不幸生错地方的话，能不挨“板 砖”估计就算万幸了。&lt;/p&gt;

&lt;p&gt;从上面随便举的一些例子中，你可能能猜到，西方科学家的数量是非常多的，于是你会 想中国应该也有少量的科学家吧？我可以很负责任地告诉你一个不幸的结果，中国本土产生 的科学家的数量为0。目前在国内，软件领域的唯一的科学家就是上面提过的姚期智，还是 国外请回来的，并不是本土产生的。&lt;/p&gt;

&lt;p&gt;可能你不同意我说的本土科学家数量为0的结论，因为你经常看到有许多公司里都有所 谓“首席XX科学家”的头衔。我想说的是，这些所谓的“首席XX科学家”都是远远够不到这 层楼的级别的，有些人的水平估计也就是一个“牛人”或“大牛”的级别，好一点的最多也就一 个“学者”的级别。尤其是那些被称作“首席经X学家”的，基本上可以把称号改为“首席坑大 家”。&lt;/p&gt;

&lt;p&gt;虽然我国没有人能爬到这层楼上来，但是西方国家仍然有许多人爬到了比这层更高的楼 上。如果要问我们比西方落后多少？那么可以简单地回答为：“落后了三层楼”。下面就来看 看我们做梦都没有到过的更高一层楼的秘密。&lt;/p&gt;

&lt;p&gt;第9层 大科学家&lt;/p&gt;

&lt;p&gt;进入这层楼的门槛通常需要一些运气，比如某天有个苹果砸到你头上时，你碰巧发现了 万有引力，那么你可以进到这层楼来。当然，万有引力几百年前就被人发现了，如果你现在 到处嚷嚷着说你发现了万有引力，恐怕马上会有人打110，然后警察会把你送到不正常人类 的聚集地去。因此，这里举万有引力的例子，只是说你要有类似的成就才能进到这层楼来。 牛顿发现万有引力定律开创了经典物理运动力学这门学科，如果你也能开创一门大的学 科，那么你就从科学家晋升为“大科学家”。比如爱因斯坦创建了相对论，从一个小职员变成 了大科学家。当然大科学家可远不止这两人，数学界里比物理学界更是多得多，如欧几里得 创建了平面几何，笛卡尔开创解析几何，还有欧拉、高斯、莱布尼茨等数不清的人物，跟计 算相关的大科学家则有图灵等人。&lt;/p&gt;

&lt;p&gt;从上面列出的一些大科学家可以发现，他们的成就不仅是开创了一个大的学科，更重要 的是他们的成就上升到了“公理”的层面。发现公理通常是需要一点运气的，如果你的运气不 够好的话，另外还有一个笨办法也可以进到这层楼来，那就是成为集大成者。例如冯·诺伊 曼，对数学的所有分支都非常了解，许多领域都有较大的贡献，即使撇开他对计算机的开创 贡献，成为大科学家照样绰绰有余。&lt;/p&gt;

&lt;p&gt;当然，程序员们最关心的是自己有没有机会变成大科学家。既然计算机这门大学科的开 创性成果早就被冯·诺伊曼、图灵等人摘走了，那么程序员们是不是没有机会变成大科学家 了呢？我们的古人说得好：“江山代有才人出，各领风骚数百年”，现在在计算机这门学科下 面诞生了许多非常重要的大的分支，所以你还是有足够的机会进到这层楼的。 如果你能够彻底解决自然语言理解（机器翻译）这门学科中的核心问题， 或者你在人 工智能或者机器视觉（图像识别）方面有突破性的发现，那么你同样可以轻易地晋升为“大 科学家”。这样当某天你老了去世时，或许那天国人已经觉醒，你也能享受到如Dijkstra一 样的待遇，有满城甚至全国的人去为你送葬。&lt;/p&gt;

&lt;p&gt;现在还剩下另外一个大家感兴趣的问题没有讨论，那就是这层中已经出现了牛顿、爱因 斯坦、高斯等我们平常人都认为是顶级的科学家，是不是这层已经是楼顶了呢？相信还记得 本文标题的人应该知道现在仅仅是第9层，还有第10层没有到达呢。可能不少人现在要感 到困惑了，难道还有人站在比牛顿、爱因斯坦、高斯等人更高的楼层上？&lt;/p&gt;

&lt;p&gt;这个世界上确实存在可以用一只手的手指数得清的那么几个人，他们爬到了第10层楼 上。因此，第10层楼不是虚构的，而是确实存在的。如果对此有疑惑或者认为我在胡诌一 番的话，那么不妨继续往下看下去，窥一下第10层楼的秘密。&lt;/p&gt;

&lt;p&gt;第10层 大哲&lt;/p&gt;

&lt;p&gt;看了这层楼的名字“大哲”，可能不少人已经猜到了这层楼的秘密，那就是你的成果必须 要上升到哲学的高度，你才有机会能进到这层来。&lt;/p&gt;

&lt;p&gt;当然，上升到哲学高度只是一个必要条件，牛顿的万有引力似乎也上升到了哲学的高度， 因为不知道引力到底是怎么来的，但是牛顿没有被划到这一层，因为进到这层还有另外的条 件，那就是你的成果必须引起了哲学上的深度思考，并能让人们的世界观向前跨进一大步。 窃以为牛顿、爱因斯坦等人的成就还达不到让人们世界观向前跨进一大步的程度。&lt;/p&gt;

&lt;p&gt;所以，这层楼中的人的成就对我们普通人认识世界非常重要，你可以不学相对论，但是 你不可以不对这层楼的人所作出的成就不了解，否则你的世界观就是极其不完整的，会犯许 多认识上的错误。不幸的是，中国的科普知识普及还不够到位，知道这层楼成就的人好像并 不多，程序员中恐怕更少。下面就来看看这些用一只手的手指数得清的大哲们，到底有什么 成就，能比万有引力定律和相对论还重要。&lt;/p&gt;

&lt;p&gt;1、希尔伯特 (1862～1943)&lt;/p&gt;

&lt;p&gt;第1位进到此楼层是一位名叫“希尔伯特”的大数学家，如果你学过《泛函分析》，那么 你在学习希尔伯特空间时可能已经对这位大数学家有所了解；如果你不是学数学出身的，又 对数学史不感兴趣的话，恐怕你从来没有听说过这个名字。不过如果我问一下，知不知道二 次世界大战前世界数学中心在那里，你肯定会有兴趣想知道。&lt;/p&gt;

&lt;p&gt;不妨说一下，二战前整个世界的数学中心就在德国的哥廷根，而我们这位大数学家希尔 伯特便是它的统帅和灵魂人物。即使在二战期间，希特勒和丘吉尔也有协定，德国不轰炸牛 津和剑桥，作为回报，英国不轰炸海德堡和哥廷根。&lt;/p&gt;

&lt;p&gt;整个二十世纪上半期的超一流数学家，几乎都出自其门下。这里不妨举几个我们熟悉的 人物，例如冯·诺伊曼就曾受到他和他的学生施密特和外尔的思想影响，还到哥廷根大学任 过希尔伯特的助手，钱学森的老师冯·卡门是在哥廷根取得博士学位的。顺便提一下，这位 大数学家发现当时物理学上出了很多大的成果如相对论和量子力学，但是这些物理学家的数 学功力明显不足，因此有一段时间带领他的学生们研究过物理学，并独立发现了广义相对论， 只是不好意思和物理学家争功劳，将广义相对论的功劳全部让给了爱因斯坦。&lt;/p&gt;

&lt;p&gt;广义相对论相对于这位大数学家在数学上的贡献，其实是算不了什么的，只是由此可看 出这位大数学家品格的高尚之处。如果再去看看牛顿之流的人物的品行，整天和莱布尼茨、 虎克等人争功劳，利用自己的优势地位打压他人，甚至闹得上法庭，和这位希尔伯特先生比 起来，简直就是个小丑。&lt;/p&gt;

&lt;p&gt;说到这里，你可能对这位大数学家“希尔伯特”有了一些初步映象，感觉到了他的重要性， 不过他在数学上的主要成就可不是几句话说得清楚的。首先，他是一位集大成者，精通当时 数学所有分支领域，在数学的各个领域都有较大的贡献，当然这些成就只能让他成为一个大 科学家，不能带他进入这层楼。事实上这位“希尔伯特”解决的任何一个数学问题都够不到这 层楼的高度，那么他怎么混到这层楼来了呢？&lt;/p&gt;

&lt;p&gt;话得从1900年说起，当时还很年轻的希尔伯特在当时的世界数学大会上做了一个报告， 高屋建瓯地提出了著名的23个未解决的数学问题，然后整个二十世纪上半期，全世界的数 学家们都在这23个问题的指导下展开研究，直到现在仍然有许多数学家受这23个问题的指 导在进行研究。例如我们熟知的哥德巴赫猜想，就属于其中第8个问题素数分布的一个子问 题。&lt;/p&gt;

&lt;p&gt;如果用“高瞻远瞩”来形容这位大数学家的话，那么这个世界上恐怕没有第二个人再配得 上“高瞻远瞩”这四个字，不论是欧拉、高斯、牛顿、爱因斯坦还是被誉为最有才华的数学家 伽罗华，概不例外。&lt;/p&gt;

&lt;p&gt;虽然那23个问题是归纳总结出来的，并不全是原创，但是其中有不少问题是可以上升 到哲学的高度，引起深度思考的。可能大多数人都会觉得希尔伯特是进不到这层楼的，我们 知道提出问题的人和解决问题的人是一样伟大的，何况他提出的问题是如此之多，基于这点， 个人觉得应该让希尔伯特跨进这层楼的门槛里。&lt;/p&gt;

&lt;p&gt;看完这位希尔伯特的成就，你可能会觉得对你的世界观并没有产生任何影响。确实如此， 他提出的问题不是用来影响你的，而是用来影响其他大科学家和大哲的，下面再来说说另一 位对他提出的23个问题中的第2个问题有杰出贡献的大哲，你就会感觉到大哲们的成果的 威力了。&lt;/p&gt;

&lt;p&gt;2、哥德尔 (1906~1978)&lt;/p&gt;

&lt;p&gt;这位大哲的名字叫“哥德尔 (Gödel) ”，你可能从来也没有听说过这个名字，即使 你读了一个数学系的博士学位，如果你的研究方向不和这位大哲对口的话，你也不一定了解 这位大哲的成就，更不知道他的成果对我们这个世界有何意义。&lt;/p&gt;

&lt;p&gt;简单地说，这位大哲20多岁时就证明了两个定理，一个叫做“哥德尔完全性定理”，另 一个更重要的叫做“哥德尔不完全性定理”。你也许会觉得奇怪，第9层楼的成就就已经上升 到了公理的高度，这种证明定理的事情不是学者和大师们做的事情吗？怎么能比第9层楼的 成就还高呢？下面就来简单说一下这两个定理的含义，你就会明白这属于系统级的定理，绝&lt;/p&gt;

&lt;p&gt;不是普通的定理和公理所能比拟的。&lt;/p&gt;

&lt;p&gt;“哥德尔完全性定理”证明了逻辑学的几条公理是完备的，即任何一个由这些公理所产生 出的问题，在这个公理系统内可以判定它是真的还是假的，这个结论表明了我们人类所拥有 的逻辑思维能力是完备的。这条定理并不能将其带入这层楼来，带其进入这层楼的是另一条 定理。&lt;/p&gt;

&lt;p&gt;“哥德尔不完全性定理”是在1930年证明的，它证明了现有数学的几条公理（ZF公理系 统）是不完备的，即由这些公理产生出的问题，无法由这几条公理判断它是真的还是假的。 例如希尔伯特23个问题中的第1个问题，也就是著名的康托尔连续统假设，哥德尔在1938 年证明了现有公理系统中不能证明它是“假”的，科恩（Cohen，或许也可以称得上是“半”个 大哲）在1963年证明了现有公理系统不能证明它是“真”的。最有趣的是，即使你将某个不 可判定的问题，作为一条新的公理加入进去，所组成的新的公理系统仍然是不完备的，即你 无法构造一个有限条公理的系统，让这个公理系统是完备的。&lt;/p&gt;

&lt;p&gt;也许你仍然无法理解上面这段话的含义，不妨先说一下它对我们现实世界的影响。你可 能知道1936年出现的图灵机是现代计算机的理论模型，如果没有哥德尔不完全性定理的思 想，图灵机什么时候能出来是很难说的，所以这位哥德尔可以算作计算机理论的奠基者的奠 基者。计算机对我们这个世界产生的影响比原子弹大了多少，我想不用我说大家也都清楚。 当然，对现实世界的影响只能把哥德尔同图灵等人一样划到大科学家那一层去，能进入这层 乃是另有原因。&lt;/p&gt;

&lt;p&gt;可能你看过《未来战士》、《黑客帝国》、《I，Robot》之类的科幻电影，于是你产生制造 一个和人一样或者比人更高一级的智能机器人的想法，这就引入了一个达到哲学高度的问 题，“人到底能不能制造出具有和人一样的思维能力的机器来？”。&lt;/p&gt;

&lt;p&gt;我只能告诉你，“你的愿望是良好的，但现实是残酷的”。如果你仔细思考一下不完全性 定理的含义，并结合现代计算机所具有的能力分析一下，你会发现这个问题的答案暂时是否 定的。如果你想造出和人一样思维能力的机器，那么你需要去好好学习这位大哲及其后续研 究者的成果，并在他们的基础上有新的突破才行。&lt;/p&gt;

&lt;p&gt;为了说明这位大哲所研究领域的重要性，这里顺便再讨论一个我们日常争议不休的问 题，那就是孔夫子的“人之初、性本善”以及西方认为“人之初、性本恶”的观点孰优孰劣的问 题。可能有许多人发现西方社会现在领先我们，于是就认为“性本恶”是对的，“性本善”是错 的，中国应该抛弃以前的旧思想，改用西方的思想。当然也有一些老学究们，认为中国的人 文思想是领先于西方的，自然而然地认为“性本善”是对的，“性本恶”是错的。&lt;/p&gt;

&lt;p&gt;如果你学过大哲用过的公理化的分析方法，你就知道一套系统的多条公理间只要不会推 导出矛盾的地方，即可以自圆其说，那么它可以看作是对的。这样你可以很轻易地给这个问 题下一个结论，即“性本善”和“性本恶”是对等的，不存在孰优孰劣的问题，更不存在谁对谁 错的问题。只要你不同时将“性本善”和“性本恶”放入一个系统内，那么是不会有问题的，甚 至你也可以认为“人之初、既无善、亦无恶”，或者认为“人之初、部分善、部分恶”，都是可 以自圆其说的，所以我们的老祖宗提出的思想并没有问题，之所以落后乃是其他原因造成的。 这个问题其实在高斯所处的时代就有了结论，那时有人提出了非欧几何，即平行线公理问题， 有人认为过一点可以作多条平行线，还有人认为平行线在无穷远点是相交的，和欧氏几何关 于过一点只能作一条平行线的公理都是矛盾的，但是他们各自的系统内推导出的结论都是正 确的。&lt;/p&gt;

&lt;p&gt;上面说的只是对哥德尔不完全性定理的一些粗浅解析，实际上如果深入思考一下它的含 义的话，你会发现它对物理学等许多学科有重大影响，包含的道理实在是深刻，远非一般的 思想所能比拟，有兴趣者不妨“google”或“百度”一下“哥德尔”。或许只有我们的老祖宗“老子” 提出的哲学思想，深度可以有得一比。&lt;/p&gt;

&lt;p&gt;哥德尔不完全性定理也给那些认为科学是严谨的人当头一棒，原来连数学这样的纯理论 学科都是不严谨的，其他学科就更不用说了。&lt;/p&gt;

&lt;p&gt;至此，已经说完数学上的大哲，下面不妨再看看物理学上的大哲，物理学上好像只出过 一位叫“海森堡”的大哲（注：由于本人对物理学不甚了解，不知道“霍金”够不够得上大哲的 称号）。 3、海森堡 (1901~1976) 海森堡这个名字相信没有几个人不知道的，大部分人在学习物理时都学过他的“测不准 关系”，也就是因为这个“测不准关系”，海森堡爬到了第十层楼。&lt;/p&gt;

&lt;p&gt;如果你看过《时间简史》和《霍金讲演录－黑洞、婴儿宇宙及其他》，你也许已经了解 测不准关系的威力，所以这里不想做过多的讨论，只谈一些和本土产生的哲学思想相关的东 西。 首先看看争论了几千年，并且现在仍然有人在争论不休的“宿命论”问题。霍金认为，只 要这个宇宙有一个初始状态，粒子的运动是按照一定物理定律进行的（比如相对论、量子力 学属于这些物理定律的一部分），那么所有的粒子运动轨迹将是确定的，然后只要你承认唯 物论，即精神是由物质决定的，那么宿命论就是“对”的。当然由于测不准关系的存在，对人 而言，又是无法准确预测的，因此也可以将其看作是“不对”的。简单的说，可以认为宿命论 是“对”的是绝对的，宿命论是“不对”的是相对的。&lt;/p&gt;

&lt;p&gt;可能上面这段话你现在仍然难以理解，或许你又觉得你的命运并不是上天注定的，而是 可以通过自己的努力可以改变的。我要告诉你的是，你在想什么也是事先已注定的，包括你 在预测本身也是事先注定的，因为大脑思考问题最终是基本粒子运动的结果，而这些粒子的 运动必然要遵循物理定律进行，所以你会不会努力，想不想努力，包括你在想你该不该努力 这件事本身也是事先注定的。顺便说一下，你现在正在看这篇文章，可能正在想这个宿命论 问题值得怀疑，或者觉得写得不够好，准备砸个板砖上来；或者你在想这篇问题写得有点意 思，准备看完后转给朋友看一看；又或者你看到这里，觉得很累了，准备休息一下；…；这 些都是上天事先就注定的。从你自身的相对角度看，因为你事先不知道后来会发生什么，也 可以认为不是事先注定的，可能这句话有些不好理解，不妨好好理解前面说过的公理化思想。 如果你没看过《霍金讲演录－黑洞、婴儿宇宙及其他》，你可能会觉得很惊讶，宿命论 历来不都被认为是唯心论吗，怎么由唯物论推导出了宿命论呢？现实就是这样和你开了一个 大的玩笑，不过这个玩笑也是事先注定的。如果你再仔细用公理化的方法思考一下唯物论和 唯心论的矛盾性，就像前面分析性善论和性恶论一样，你会发现唯物论、唯心论不一定就是 冲突的，矛盾的双方是可以统一的，只要你不要同时将唯物和唯心放进同一个系统中就行。 当然也有聪明者仍然会怀疑宿命论问题的正确性，因为这里有一个前提条件，即宇宙要 有一个初始状态。宇宙有没有初始状态，我们并不知道啊，虽然有大爆炸学说，但那也只是 假说而已，并没有得到确证，有些人就认为宇宙是一直都存在的。这样看来似乎你又有合理 的理由在怀疑宿命论了，不过我仍然要告诉你，你现在在怀疑宿命论仍然是事先注定的，不 相信的话就来看看下面的分析。&lt;/p&gt;

&lt;p&gt;虽然宇宙的初始状态值得怀疑，但是这个宇宙至少已经存在了一段时间，这点我想是毋 庸置疑的。我们可以在我们已知的宇宙存在的这段时间内，任意取一个时间点t0，那么在这 个时间点t0上，所有的粒子都有一个运动状态。在时间点t0之后的时间里，由于粒子运动 是按照物理定律进行的，因此粒子运动轨迹由时间点t0的状态决定。说白一点，如果取100 年前的一个时间点作为t0，那么现在的所有粒子运动状态100年前就已经确定了，如果取 10000年前一个时间点作为t0，那么最近10000年内所有粒子运动的轨迹在10000年前就确 定了，当然，你可以取更早的时间，比如100亿年前的时间点。&lt;/p&gt;

&lt;p&gt;总之，现在你会发现宇宙有没有初始状态并不会影响宿命论的正确性，所以这个世界的&lt;/p&gt;

&lt;p&gt;一切都是注定的。只不过由于粒子间相互影响过于复杂，我们无法知道这些粒子的运动轨迹 而已。当然，如果将测不准关系用上的话，那么就是这个运动轨迹对人来说是无法准确预测 的，所以不妨开个玩笑：“算命先生经常算得不准大概是测不准关系的缘故吧”。 如果你再深入思考一下测不准关系，你会发现这是一个测量系统的问题。由于宿命论的 存在，这个世界本身实际上是确定的，是“准“的，之所以测不准乃是我们人类所具有的测量 能力依赖于基本粒子造成的。所以我在前面说宿命论是“不对”的是相对的，它是相对于我们 人类的测量能力而言的。根岑（Gentzen，曾任希尔伯特的助手）在一个更强的系统内证明 了ZF系统内的问题都是可判定的，从一个侧面说明这个世界本身是确定的。（注：它和哥 德尔不完全性定理并不矛盾，由于数学上的复杂性，这里就不详细解释了） 不妨再想想我们老祖宗提出的“是庄周梦见了蝴蝶？还是蝴蝶梦见了庄周？”，“风动？ 幡动？还是心动？”之类的问题，当然以前你都认为这是纯粹的唯心主义，甚至认为是封建 糟粕，但是如果结合测不准关系的内涵，再结合前面所说的公理化分析方法进行分析，估计 你现在不敢轻易地下结论。&lt;/p&gt;

&lt;p&gt;也许到现在你仍然无法理解为什么把大哲们划在了大科学家的上一层，你可能仍然觉得 万有引力、相对论等成果是最伟大的。下面就来谈谈为什么大哲比大科学家高一层。&lt;/p&gt;

&lt;p&gt;如果把人类在现有能力情况下，将来所能够拥有的知识总集看成是一个集合A，人类现 在已有的知识总集看成是集合B，显然，集合B只是集合A的一个子集，并且是很小的一 个子集。牛顿力学、相对论这些理论只能算作集合B里的一个子集，相对于集合A，只能 算作是沧海一粟。 换句话说，在人类现有能力可做的事情集合中，牛顿力学和相对论等理 论给出了详细的办法让你可以做其中的一些事情，当然剩下的更多的事情是牛顿力学和相对 论所无法解决的。&lt;/p&gt;

&lt;p&gt;哥德尔不完全性定理和测不准关系的意义在于，它指出集合A的范围，即将人类现有 能力发挥到极限的情况下，那些事情是你能做到的，那些是你不能做到的。当然，它并没有 给出具体的方法让你去做你能做到的事情，它只是告诉我们我们人类现在发现的能力所能达 到的极限。或许将来发现人类有其他新的未发现的能力，那么这个极限就被打破了。比如将 来能发现不依赖于基本粒子的其他测量方法，并且测量过程中不会改变其他粒子的状态，那 么测不准关系就被打破了。&lt;/p&gt;

&lt;p&gt;看到这里，估计你已经发现了一些秘密，科学兜了一大圈，最终还是回到了哲学，也就 是我们所认为的玄学上。同时你也会发现，我们老祖宗提出的所谓玄学，原来和现代科学是 相通的，并非象某些人想像的那样全是糟粕。如果有人认为西方现代暂时领先我们，进而就 认为西方古代就已经超越我们，我们老祖宗就已经落后西方，他们的思想都是糟粕的话，那 么我认为他可能犯了崇洋媚外的毛病。我不得不化用一句周杰伦在春晚上的歌词送给他：“你 不妨抓一副我们祖传的中医良方，治一治你那崇洋媚外的内伤”。顺便告诉他一下，中医用 的阴阳五行理论，它的前提假设就是宿命论。&lt;/p&gt;

&lt;p&gt;上面说的这几位大哲的成果，可能对你的世界观会有很大的影响，于是你可能会羡慕起 这些大哲们的成果来。如果你有大志的话，你会希望有朝一日你也能变成大哲，但是你发现 上面的大哲是研究数学和物理学的，而你是学计算机的程序员，那么是不是没有机会变成大 哲呢？&lt;/p&gt;

&lt;p&gt;如果你能将NP难题给彻底解决掉，意味着计算机内的计算的奥秘基本被揭开，或许你 可以进到这层楼来；或者你能发现另外一套计算机可以理解的数学公理系统，并且这个公理 系统是完备的，那么计算机取代人类进行思维的一个必要条件就满足了，计算机将具有真正 意义上的“逻辑思维和推理能力”，你可以轻松地进到这层楼来。如果你发现了新的方法可以 打破测不准关系，同样你也可以轻松地进到这层楼来。&lt;/p&gt;

&lt;p&gt;如果你能彻底揭开人类抽象思维的奥妙，并让计算机懂得了如何创建抽象，具备抽象思 维能力，那么也就具备了“设计能力”，可以取代人类进行各种设计了，你也可以轻松地进到 这层楼来。顺便说一下，如果你对软件设计有真正深刻理解的话，就会明白这不是在写科幻 小说。对此感兴趣者，不妨好好地研究一下程序切片方面的技术，会让你对软件设计和测试 等方面的理解有质的提高，或许有一天你能打开这扇大门。&lt;/p&gt;

&lt;p&gt;当然，计算机要完全取代人还有其他必要条件，后面还会提及。&lt;/p&gt;

&lt;p&gt;值得一提的是，虽然第10层楼是本文中所写的最高层，但是大哲们并没有觉得他们到 了顶层，他们通常都还会努力寻找通往更高一层的楼梯。如果你也有成为天下第一的想法， 那么你或许会想要做什么事情才能超越大哲们的成就，当然，这都得依赖于找到更高一层楼 的楼梯。&lt;/p&gt;

&lt;p&gt;个人认为，再往上一层楼的楼梯是通往天堂的道路，也就是说第11层楼的名字叫“天 堂”，是“上帝”住的地方，而不是人住的地方。如果将来某天有人能爬到天堂的话，那么他 已经不是人了，而是由人变成了“上帝”。&lt;/p&gt;

&lt;p&gt;你也许会怀疑这个世界到底有没有“天堂”，“上帝”是否根本就不存在，我也很有同感。 因此有必要再写上一段文字，讨论一下“上帝”的问题。如果你想了解天堂的奥妙，有没有办 法让你变成“上帝”，不妨看看继续往下看看第11层楼的玄妙。注意我这里用的是“玄妙”二 字，因为上帝在大部分人眼里估计都是“玄之又玄”的东西。&lt;/p&gt;

&lt;p&gt;第11层 上帝&lt;/p&gt;

&lt;p&gt;看了上面的小标题，你可能会觉得奇怪，这篇文章不是讲“程序员的十层楼”吗？怎么冒 出了第11层来了？&lt;/p&gt;

&lt;p&gt;其实这并不矛盾，程序员确实只有十层楼，因为爬到第11层时，已经变成上帝，不再 是程序员了；所以超出10层楼本身并不重要，关键的问题是看你有没有能力变成上帝。 1、谁是上帝？&lt;/p&gt;

&lt;p&gt;菜鸟们认为Linus Torvalds是程序员中的上帝，看完了前面各层楼的介绍，此时再看到 这句话，相信你要忍不住在心里笑起来。当然，你会不会笑起来是事先注定的。Don Knuth 也不是上帝，他离上帝还有三层楼的距离。即使是大哲们，他们离天堂也还差一层楼，因此 这个世界上有史以来还没有任何一个人变成过上帝。&lt;/p&gt;

&lt;p&gt;我们感兴趣的是，将来会不会有人爬到比大哲们更高的楼层上，变成了上帝。 要变成上帝，你得有上帝一样的能力，上帝会造人，你会吗？&lt;/p&gt;

&lt;p&gt;你也许会怯生生地问：“我可以和爱人生小孩，算不算造人？”，你可能还会理直气壮地 说：“现在生物学上都可以克隆人了，早就有人掌握了造人的方法”。&lt;/p&gt;

&lt;p&gt;事实上克隆人需要有人的体细胞，必须要先有人才会有体细胞。上帝造人时，这个世界 上并没有人，是从无生命的物质“尘土”中创造出的人。因此，用最原始的方法生人和克隆人 都是从有生命信息的物质中生人，不能算作造人。&lt;/p&gt;

&lt;p&gt;这样看来，你根本不会造人，不过我可以告诉你一个“玄方”，让你有机会学会如何造人。 如果你揭开了人类情感的奥秘，让计算机也可以拥有和人类一样的情感，那么计算机将 可以理解人类的需求，具有了“情商”，将具有完整的和人一样的能力。此时，人类进化到了 机器人，科幻小说将变成现实，也就是说你已经掌握了真正的造人能力，晋升为“上帝”了。 未来到底有没有人能变成“上帝”，人能不能进化到机器人，这是宿命论中事先注定了的。 说到这里，不妨再告诉你一个打破宿命论的方法，这个方法就是你要爬到比上帝还要高的楼 层。&lt;/p&gt;

&lt;p&gt;“还有比上帝还高的楼层？”，你可能会第1时间内冒出这个问题，其实我也有同样的怀 疑。因此在写第12层楼前，有必要弄清楚它到底存不存在，即你可不可以骑到上帝的头上 的问题。&lt;/p&gt;

&lt;p&gt;2. 骑到上帝的头上？&lt;/p&gt;

&lt;p&gt;为了解决是否可以骑到上帝的头上这个问题，不妨先假设存在比上帝高的楼层，也就是 存在打破宿命论的方法。&lt;/p&gt;

&lt;p&gt;宿命论的本质原因是因为时间是单向运行，不可逆转造成的。如果你找到一种可以使时 间逆转的方法，那么你就打破了宿命论，爬到了比上帝还高的楼层。&lt;/p&gt;

&lt;p&gt;看到这里，你也许会摆脱刚才陷于宿命论的困惑情绪，变得充满希望般高兴起来。不过， 如果你的逻辑思维能力足够好，仔细思考一下，会发现存在一个逻辑上的悖论。&lt;/p&gt;

&lt;p&gt;在你找到时间逆转的方法之前，显然这个世界仍然是需要服从宿命论的，也就是说你能 不能找到打破宿命论的方法是事先注定的。假设你在某个时间点t0处找到了打破宿命论的 方法，你在打破宿命论后，想利用时间逆转的方法回到某个时间点t2。下面来看看你到底能 不能回到时间点t2。&lt;/p&gt;

&lt;p&gt;取位于t0和t2之间的任意一个时间点t1，你在回到时间点t2之前，必须先经过时间点 t1，考虑你到达t1的那一时刻，由于t1比t0要早，这个时间点上你还没有找到时间逆转的 方法，所以到了时间t1点后，你无法再使用时间逆转的能力回到时间点t2去，所以你永远 也回不到时间点t2，由于时间点t2是任意取的，因此，你永远也无法使时间逆转，或者说 你根本就没打破过宿命论，这与你在时间点t0打破了宿命论产生了矛盾。&lt;/p&gt;

&lt;p&gt;上面这段话看起来似乎有点像“人永远迈不出一步”的诡辩一样，你可能会想返回到时间 点t1时，仍然可以拥有时间逆转能力啊。不过你又会发现一个新的问题，时间点t1本来是 没有时间逆转能力的，现在又认为时间点t1又有时间逆转能力，那时间点t1到底是有还是 没有时间逆转能力呢？或者说在时间点t0前，宿命论注定了时间点t1是没有时间逆转能力 的，现在你又认为时间点t1具有时间逆转能力，那么这两个时间点t1究竟是不是同一个时 间点？如果不是同一个时间点，说明你没有回到过去；如果是同一个时间点的话，岂不是自 相矛盾吗？&lt;/p&gt;

&lt;p&gt;为了说得更形象一些，不妨假设你坐一艘超光速飞船，准备从时间点t0回到时间点t2 去，假设你回到t2后，随着时间的流逝，又达到了时间点t0，如果这时你又再次坐超光速 飞船返回时间点t2，那么一个值得思考的问题就出现了，“你在时间点t2能不能看到上次返 回时间点t2的飞船？”&lt;/p&gt;

&lt;p&gt;如果回答不能看到飞船，那么上次返回的飞船那里去了呢？显然很难解释通。如果回答 能看到飞船，那么你可以到达时间点t2后，下次时间到达t0时，你又坐飞船返回t2，这次 你将可以看到上两次的两艘飞船。如果这样一直循环下去，最后你会发现你可以在时间点t2 看到无穷多的飞船。用程序员的术语说，叫做“程序陷入了死循环”，最后系统必然会出现“Out of Memory”现象而崩溃。&lt;/p&gt;

&lt;p&gt;当然，你也可以认为有其他的方法，不需要飞船，可以一次性从时间点t0直接跳跃到 时间点t2，并不需要经过时间点t1。下面不妨来分析一下这个方法是否可行。&lt;/p&gt;

&lt;p&gt;既然是直接跳跃到时间点t2，那么你必然是在一个无穷小的时间里出现在时间点t2的 某个空间里，例如你要在时间点t2回到某个广场上。首先说明一下为什么是无穷小的时间 里出现的，因为如果不是无穷小的时间里出现的话，那么必然可以取到一个时间点t1，会导 致前面所说的时间点t1上出现悖论。&lt;/p&gt;

&lt;p&gt;你在广场上出现的时，广场上的空气必然要为你让开空间，而这是在无穷小的时间里完 成的，那么很容易推导出你周围的空气获得的加速度和速度都是无穷大，因而它具有的动能 也是无穷大，无穷大的能量和无穷大的速度意味着什么？一只鸟都可以将飞机撞下来，如果 宇宙是有限大的话，它可以让这个宇宙炸毁无穷次；即使宇宙是无限大，它也足以让宇宙炸 毁一次。宇宙都毁灭了，又何来的时间？还能说你回到了时间点t2吗？&lt;/p&gt;

&lt;p&gt;也许上面说的这些你仍然难以相信，不妨再说得更现实一些，假设你要回到100年前的 一个时间点，这100年中，天上有多少流星湮灭了？有多少新星生成了？宇宙膨胀了多少？&lt;/p&gt;

&lt;p&gt;你有能力让湮灭的流星复原、生成的新星重新返回未生成前的状态，膨胀的宇宙收缩回去 吗？如果这些东西的状态没有回复到100年前，又怎么能说明你回到的是100年前的时间点 呢?&lt;/p&gt;

&lt;p&gt;根据上面的推导和分析，个人认为使时间逆转的方法是不存在的，所以第12层楼是不 存在的，自然没有人可以骑到“上帝”的头上。&lt;/p&gt;

&lt;p&gt;宿命论将在有时间的时间里永远统治这个世界。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>change post:rubyliyeildheblockdeyongfa</title>
   <link href="http://username.github.com/2012/10/26/change-postrubyliyeildheblockdeyongfa"/>
   <updated>2012-10-26T00:00:00+08:00</updated>
   <id>http://username.github.com/2012/10/26/change-postrubyliyeildheblockdeyongfa</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>日思夜想</title>
   <link href="http://username.github.com/essay/2012/08/27/risiyexiang"/>
   <updated>2012-08-27T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/08/27/risiyexiang</id>
   <content type="html">&lt;p&gt;我很少写生活blog了。心底总有些不好意思和朋友分享我的现状。 &lt;br /&gt; 写这一篇的触动是因为最近看一些台湾人的博客，觉得他们做什么都好活泼热血。一点点小事情————比如吃彰化市的牛肉味马丸也能开心到爆。 &lt;br /&gt; 如沐春风的笑容越来越难以在现实中看到了。 &lt;br /&gt; 所以，把开心不开心小情绪都倒真是一件很痛快的事情，若有人分享，再好不过。 &lt;br /&gt;&lt;br /&gt; 最近的好事有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建了自己私人blog，&lt;strong&gt;liusihao.com&lt;/strong&gt;，虽然有些粗糙，不过自己已经非常满意。比较让人郁闷的是，以前的文都被自己不小心删掉了。要一个页面一个页面地从浏览器缓存和回收站里找。&lt;/li&gt;

&lt;li&gt;找Linsk借了个世界上最好的VPS linode。答应帮他配置一个PHP+RAILS+nginx+MySQL的环境，可惜现在还没行动。 :) 这周帮你搞定。&lt;/li&gt;

&lt;li&gt;买到了AKG K420耳机，听豆瓣友邻说是这个价位性价比最高的耳机。感觉音质好了些，不过变化不大，可能还需要继续煲机的缘故吧。&lt;br /&gt;&lt;br /&gt; &lt;img alt='AKG K420' src='http://farm9.staticflickr.com/8302/7870106782_c43586a887.jpg' /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;br /&gt;
&lt;p&gt;比较郁闷的是：&lt;br /&gt;1. 原先为Brandon做的第二个项目出Bug了。初步判断是生产环境和开发环境有所差异，再加上逻辑写得不够严密，有些不好意思：） 一直跟想跟Brandon沟通，可他总是不回邮件，Bug还是他的小弟Daniel检查出来的，他太不上心了。&lt;br /&gt;2. 这周计划的《期权、期货及其他衍生产品》第一章作业还没写完，又欠债了。&lt;br /&gt;3. 最近睡觉太晚了，锻炼也没怎么坚持，仰卧起坐要多做啊，上次去Linsk那玩时，被Linsk的女朋友说有小肚子。T_T&lt;br /&gt;4. 想画画，没时间，想写小说，没灵感&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;昨天晚上想了想朋友的问题，这是带给我影响最大的三类朋友： 第一种给我追逐理想的热血，第二种给我洗尽铅华的温暖，第三种给我肆无忌惮的欢笑。:) &lt;br /&gt;&lt;br /&gt; 下面一对白是我最近在本小说《人欲》里看到的，觉得很有水平，顺便贴上来。 &lt;br /&gt; 白少流：&amp;#8221;她想要，我能给她，你想要，我给不了&amp;#8221; &lt;br /&gt; &amp;#8220;我也不知到我想要什么，为什么说我想要你给不了？&amp;#8221; &lt;br /&gt; “你说的不过是一个人的处境而已，人们之所以看见这些，无非想的是这种处境中能够得到的东西与感觉。我很了解你，你需要一个时刻关心照顾你的人，需要一个情感上的寄托和依靠，需要过一种安心的生活，能给你这一切是不是我这个人并不重要。寻找这种感觉，是你应该做的事情，未必在我这里。” &lt;br /&gt;&lt;br /&gt; 最后，在左岸的空间里发现了一张她在办公室照片，不过没经过他人同意，我是不会贴上来的 :)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Polymorphism and Duck Type in Ruby</title>
   <link href="http://username.github.com/technology/2012/08/25/polymorphism-and-duck-type-in-ruby"/>
   <updated>2012-08-25T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2012/08/25/polymorphism-and-duck-type-in-ruby</id>
   <content type="html">&lt;p&gt;Note：some codes are sourced by《Refactoring（Ruby Edition）》&lt;/p&gt;

&lt;p&gt;In a static language，design pattern can decouple or put off conditional logic（if，else，switch，case……）.So let us look at what ruby do that only use polymorphism&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Rental
  def charge
      result = 0
      case movie.price_code
      when Movie::REGULAR
          result += 2
          result += (days_rented -2) * 1.5 if     days_rented &amp;gt; 2
      when Movie::New_RELEASE
          result += days_rented * 3
      when Movie::CHILDRENS
          result += 1.5
          result += (days_rented - 3) * 1.5 if days_rented &amp;gt; 3
      end
      result
  end
end
#You can look at the &amp;quot;charge&amp;quot; method should belongs to Movie class.And Movie class inhert Rental class:

class Movie
  def charge
      result = 0
      case movie.price_code
      when Movie::REGULAR
          result += 2
          result += (days_rented -2) * 1.5 if days_rented &amp;gt; 2
      when Movie::New_RELEASE
          result += days_rented * 3
      when Movie::CHILDRENS
          result += 1.5
          result += (days_rented - 3) * 1.5 if days_rented &amp;gt; 3
      end
      result
  end
end&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>人欲对白摘抄</title>
   <link href="http://username.github.com/essay/2012/08/25/new-post"/>
   <updated>2012-08-25T00:00:00+08:00</updated>
   <id>http://username.github.com/essay/2012/08/25/new-post</id>
   <content type="html">&lt;p&gt;风君子：用你愿意听话说吧，上帝与世界相处，就像与自己相处。那么每一个人达到化身境界都要回答一个问题：如何与自己相处？&lt;/p&gt;

&lt;p&gt;黄静和白少流的对话： &lt;br /&gt; 黄静：&amp;#8221;其实只要你说一句话，要我留在你身边，我一定属于你，有些事后我不太明白，我和庄茹想比，究竟区别在哪里？&amp;#8221; &lt;br /&gt; 白少流：&amp;#8221;她想要，我能给她，你想要，我给不了&amp;#8221; &lt;br /&gt; &amp;#8220;我也不知到我想要什么，你不仅年少英俊，而且人品才华都没得挑，又身为河骆集团的董事，为什么说我想要你给不了？&amp;#8221; &lt;br /&gt; “你说的不过是一个人的处境而已，人们之所以看见这些，无非想的是这种处境中能够得到的东西与感觉。我很了解你，你需要一个时刻关心照顾你的人，需要一个情感上的寄托和依靠，需要过一种安心的生活，能给你这一切是不是我这个人并不重要。寻找这种感觉，是你应该做的事情，未必在我这里。”&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll notes</title>
   <link href="http://username.github.com/technology/2012/08/25/jekyll-notes"/>
   <updated>2012-08-25T00:00:00+08:00</updated>
   <id>http://username.github.com/technology/2012/08/25/jekyll-notes</id>
   <content type="html">&lt;h3 id='documentjekyllbootstrap'&gt;Document:&lt;a href='http://jekyllbootstrap.com/'&gt;jekyllbootstrap&lt;/a&gt;&lt;/h3&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Preview:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jekyll &amp;#8211;server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Create a Post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;rake post title=&amp;#8221;Hello World&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Create a Page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;rake page name=&amp;#8221;about.md&amp;#8221;&lt;br /&gt;rake page name=&amp;#8221;pages/about.md&amp;#8221;&lt;br /&gt;rake page name=&amp;#8221;page/about&amp;#8221; (this will create the file: ./pages/about/index.html)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Customize Themes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;modify &amp;#8220;./_includes/themes/THE-NAME&amp;#8221; folder modify &amp;#8220;./index.md&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;deploy:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git commit -m &amp;#8220;Add new content&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 
</feed>